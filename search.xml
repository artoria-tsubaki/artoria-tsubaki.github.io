<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS栅格布局</title>
      <link href="/2020/07/26/css-zha-ge-bu-ju/"/>
      <url>/2020/07/26/css-zha-ge-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-栅格布局"><a href="#CSS-栅格布局" class="headerlink" title="CSS 栅格布局"></a>CSS 栅格布局</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>这是一个二维系统，这意味着它可以同时处理列和行。</p><p>在放入图片文字之前，就将空间划分成一格一格的栅格 。</p><h2 id="2-声明容器、划分行列"><a href="#2-声明容器、划分行列" class="headerlink" title="2. 声明容器、划分行列"></a>2. 声明容器、划分行列</h2><ul><li>通过以下代码即可实现栅格布局</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span></code></pre><blockquote><p>栅格化的元素是块状元素，独占一行，当然也能通过 display: inline-grid 实现行内块元素的转化</p></blockquote><ul><li>划分行列：</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">50</span>px <span class="token number">50</span>px<span class="token punctuation">;</span></code></pre><blockquote><ol><li>使用 grid-template-rows 规划可划分行数</li><li>使用 grid-template-columns 规划可划分列数</li><li>上例被划分为 2 行，4 列</li></ol></blockquote><ol><li><p>固定宽度：</p><p>上例即是 固定宽度 来实现每个格子的大小</p></li><li><p>百分比</p><p>可以使用使用百分比自动适就容器。</p><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">50%</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">25%</span> <span class="token number">25%</span> <span class="token number">25%</span> <span class="token number">25%</span></code></pre></li><li><p>重复设置</p><p>使用 <code>repeat</code> 统一设置值，第一个参数为重复数量，第二个参数是重复值</p><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">50%</span><span class="token punctuation">)</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span>, <span class="token number">25%</span><span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">100</span>px <span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 列的宽度为 100px 50px 100px 50px */</span></code></pre></li><li><p>自动填充</p><p>自动填充是根据容器尺寸，自动设置元素尺寸。</p><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill, <span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span>auto-fill, <span class="token number">100</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>比例划分</p><p>使用 <code>fr</code> 单位设置元素在空间中所占的比例。</p><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">1</span>fr <span class="token number">2</span>fr<span class="token punctuation">;</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">1</span>fr <span class="token number">2</span>fr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 分为三列，第一列固定 100px，第二列占剩余宽度的一份，第三列占剩余宽度的两份*/</span></code></pre><p>也可以使用重复定义【最常用】</p><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">1</span>fr <span class="token number">2</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>组合定义</p><p><code>grid-tempalte</code> 是 <code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code> 的三个属性的简写。</p><pre class=" language-css"><code class="language-css"><span class="token property">grid-template</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">1</span>fr / <span class="token number">50</span>px <span class="token number">1</span>fr<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*同时声明 grid-template-rows、grid-template-columns。*/</span></code></pre></li><li><p>minmax</p><p>使用 <code>minmax</code> 方法可以设置取值范围，下列在行高在 <code>最小100px ~ 最大1fr</code> 间取值。</p><pre class=" language-text"><code class="language-text">grid-template-rows: 100px minmax(100px, 1fr);grid-template-columns: 100px 1fr;</code></pre></li></ol><h2 id="3-间距定义"><a href="#3-间距定义" class="headerlink" title="3. 间距定义"></a>3. 间距定义</h2><ul><li>row-gap</li><li>column-gap</li><li>gap</li><li>间距与 padding 、margin 类似</li></ul><h2 id="4-栅格命名"><a href="#4-栅格命名" class="headerlink" title="4.栅格命名"></a>4.栅格命名</h2><p>可以为每个栅格独立命名来进行调节</p><pre class=" language-css"><code class="language-css"><span class="token selector">grid-template-rows: <span class="token attribute">[r1-start]</span> 100px <span class="token attribute">[r1-end r2-start]</span> 100px <span class="token attribute">[r2-end r3-start]</span> 100px <span class="token attribute">[r3-end]</span>;grid-template-columns: <span class="token attribute">[c1-start]</span> 100px <span class="token attribute">[c1-end c2-start]</span> 100px <span class="token attribute">[c2-start c3-start]</span> 100px <span class="token attribute">[c3-end]</span>;div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> r<span class="token number">2</span>-start<span class="token punctuation">;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> c<span class="token number">1</span>-end<span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> r<span class="token number">2</span>-end<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> c<span class="token number">3</span>-start<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">grid-template-rows: repeat(3, <span class="token attribute">[r-start]</span> 100px <span class="token attribute">[r-end]</span>);grid-template-columns: repeat(3, <span class="token attribute">[c-start]</span> 100px <span class="token attribute">[c-end]</span>);div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> r-start <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> c-start <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> r-start <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> c-end <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-元素定位"><a href="#5-元素定位" class="headerlink" title="5.元素定位"></a>5.元素定位</h2><ol><li><p>根据栅格线</p><pre class=" language-css"><code class="language-css"><span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token property">grid-row-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token property">grid-column-end</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre></li><li><p>根据栅格命名</p><pre class=" language-css"><code class="language-css"><span class="token selector">grid-template-rows: <span class="token attribute">[r1-start]</span> 100px <span class="token attribute">[r1-end r2-start]</span> 100px <span class="token attribute">[r2-end r3-start]</span> 100px <span class="token attribute">[r3-end]</span>;grid-template-columns: <span class="token attribute">[c1-start]</span> 100px <span class="token attribute">[c1-end c2-start]</span> 100px <span class="token attribute">[c2-start c3-start]</span> 100px <span class="token attribute">[c3-end]</span>;div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> r<span class="token number">1</span>-end<span class="token punctuation">;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> c<span class="token number">2</span>-start<span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> r<span class="token number">3</span>-start<span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> c<span class="token number">3</span>-start<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>根据自动命名</p><pre class=" language-css"><code class="language-css"><span class="token selector">grid-template-rows: repeat(3, <span class="token attribute">[r-start]</span> 100px <span class="token attribute">[r-end]</span>);grid-template-columns: repeat(3, <span class="token attribute">[c-start]</span> 100px <span class="token attribute">[c-end]</span>);div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> r-start <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> c-start <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> r-start <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> c-end <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>根据移量<strong>【好用】</strong></p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-row-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-column-start</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token property">grid-row-end</span><span class="token punctuation">:</span> span <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">grid-column-end</span><span class="token punctuation">:</span> span <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>grid-area</p><p>是 <code>grid-row-start/grid-column-start/grid-row-end/grid-column-end</code> 的组合声明。</p></li></ol><h2 id="6-区域声明"><a href="#6-区域声明" class="headerlink" title="6. 区域声明"></a>6. 区域声明</h2><p>区域是由多个单元格构成，使用 <code>grid-template-areas</code>可以定义栅格区域，并且栅格区域必须是矩形的。</p><ul><li>区域布局</li></ul><p>​ 通过该方法可以实现 <code>圣杯布局</code> 相同的效果</p><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">1</span>fr <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">1</span>fr <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">grid-template-areas</span><span class="token punctuation">:</span>    <span class="token string">'header header header'</span>    <span class="token string">'nav main aside'</span>    <span class="token string">'footer footer footer'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">header </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> header<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">nav </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> nav<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">105</span>, <span class="token number">104</span>, <span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">main </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> main<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">aside </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> aside<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">footer </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> footer<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><ul><li><p>区域命名</p><p>系统会为区域自动命名，上例中的会产生 <code>header-start</code> 水平与垂直同名的起始区域与 <code>header-end</code>水平与垂直同名的区域终止。</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-class">:nth-child(1)</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> header-start/nav-start/main-end/main-end<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>  <span class="token property">grid-area</span><span class="token punctuation">:</span> footer-start/footer-start/footer-end/footer-end<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span></code></pre><ul><li><p>区域占位</p><p>使用一个或多个 <code>.</code> 定义区域占位。</p></li></ul><pre class=" language-css"><code class="language-css"><span class="token property">grid-template-areas</span><span class="token punctuation">:</span>  <span class="token string">'top . .'</span>  <span class="token string">'top . .'</span>  <span class="token string">'bottom bottom bottom'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*所占位置呈 L 形 */</span></code></pre><h2 id="7-栅格流动"><a href="#7-栅格流动" class="headerlink" title="7. 栅格流动"></a>7. 栅格流动</h2><p>在容器中设置<code>grid-auto-flow</code> 属性可以改变单元流动方式。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 系统默认 */</span><span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> row<span class="token comment" spellcheck="true">/* 以列为流动方向 */</span><span class="token property">grid-auto-flow</span><span class="token punctuation">:</span> column</code></pre><ul><li><p>强制填充</p><p>当元素在栅格中放不下时，将会发生换行产生留白，使用<code>grid-auto-flow: row dense;</code> 可以执行填充空白区域操作。</p></li></ul><h2 id="8-栅格对齐"><a href="#8-栅格对齐" class="headerlink" title="8. 栅格对齐"></a>8. 栅格对齐</h2><p>可以通过属性方便的定义栅格的对齐方式，可用值包括 <code>start | end | center | stretch | space-between | space-evenly | space-around</code>。与 <strong>弹性盒模型</strong> 定位对齐类似。</p><table><thead><tr><th>选项</th><th>说明</th><th>对象</th></tr></thead><tbody><tr><td>align-items</td><td>栅格内所有元素的垂直排列方式</td><td>栅格容器</td></tr><tr><td>justify-items</td><td>栅格内所有元素的横向排列方式</td><td>栅格容器</td></tr><tr><td>justify-content</td><td>所有栅格在容器中的水平对齐方式，容器有额外空间时</td><td>栅格容器</td></tr><tr><td>align-content</td><td>所有栅格在容器中的垂直对齐方式，容器有额外空间时</td><td>栅格容器</td></tr><tr><td>align-self</td><td>单个元素在栅格中垂直对齐方式</td><td>栅格元素</td></tr><tr><td>justify-self</td><td>单个元素在栅格中水平对齐方式</td><td>栅格元素</td></tr></tbody></table><ul><li><p>组合缩写</p><p>​ place-content</p><p>​ 用于控制栅格的对齐方式，语法如下：</p><pre class=" language-text"><code class="language-text">place-content: <align-content> <justify-content></code></pre><p>​ place-items</p><p>​ 控制所有元素的对齐方式，语法结构如下：</p><pre class=" language-text"><code class="language-text">place-items: <align-items> <justify-items></code></pre><p>​ place-self</p><p>​ 控制单个元素的对齐方式，语法结构如下：</p><pre class=" language-text"><code class="language-text">place-self: <align-self> <justify-self></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript面试题</title>
      <link href="/2020/07/24/javascript-mian-shi-ti/"/>
      <url>/2020/07/24/javascript-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1-深浅拷贝"><a href="#1-深浅拷贝" class="headerlink" title="1. 深浅拷贝"></a>1. 深浅拷贝</h2><h3 id="1-1-浅拷贝"><a href="#1-1-浅拷贝" class="headerlink" title="1.1 浅拷贝"></a>1.1 浅拷贝</h3><p>​ 浅拷贝会克隆出一个新的对象 / 数组，这个对象和被克隆的对象不是同一个对象，但修改新的对象同样会改变被克隆的对象</p><p>​ 以下为几种实现浅拷贝的方法：</p><ul><li>假设数据为一个对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> <span class="token regex">/^\d+$/</span><span class="token punctuation">,</span>  f<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'f'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>使用 <code>for in</code> 来实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>使用 <code>Object.assign</code> 来实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj3 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// assign 属性能将两个对象的属性叠加，同名的属性后面的会覆盖前面的</span></code></pre><ul><li>使用 <code>ES6 展开语法</code> 来实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>obj <span class="token punctuation">}</span></code></pre><h3 id="1-2-深拷贝"><a href="#1-2-深拷贝" class="headerlink" title="1.2 深拷贝"></a>1.2 深拷贝</h3><p>​ 深拷贝也可以克隆出一个新的对象 / 数组，但这个新的对象更改不会影响原本的对象的属性</p><ul><li>使用 <code>JSON.stringify() + JSON.parse()</code> 来实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> objStr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>objStr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 使用这种方法在 JSON.parse() 的时候开辟出了新的空间来存放数据，引用对象指向不同就不会更新原对象的数据</span><span class="token comment" spellcheck="true">// 但这种方法存在弊端</span><span class="token comment" spellcheck="true">//      1.对正则表达式会将其更改为空对象</span><span class="token comment" spellcheck="true">//   2.对函数会“无视”，生成的新的对象不会含有值为函数的属性</span><span class="token comment" spellcheck="true">//   3.对 new Date()，会将其转换为字符串</span></code></pre><ul><li>使用 <code>for in 递归</code> 实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepclone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 判断不用经过递归处理的属性的类型</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Funtion</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">ExpReg</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExpReg</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> obj <span class="token operator">!==</span> Object<span class="token punctuation">)</span> <span class="token keyword">return</span> obj  <span class="token comment" spellcheck="true">// 不直接创建空对象的目的：克隆的结果和原对象保持相同的所属类</span>  <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      obj2<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">deepclone</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj2<span class="token punctuation">}</span></code></pre><ul><li>简化写法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepclone</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    obj2<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> v <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepclone</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">:</span> v  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj2<span class="token punctuation">}</span></code></pre><h2 id="2-对象-key-值的一些注意点"><a href="#2-对象-key-值的一些注意点" class="headerlink" title="2.对象 key 值的一些注意点"></a>2.对象 key 值的一些注意点</h2><h3 id="2-1-对象的-key-数字和字符串等效"><a href="#2-1-对象的-key-数字和字符串等效" class="headerlink" title="2.1 对象的 key 数字和字符串等效"></a>2.1 对象的 key 数字和字符串等效</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>  c <span class="token operator">=</span> <span class="token string">'0'</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'artoria'</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'saber'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>输出结果为 ‘saber’，对象的 key 都是字符串类型，也即 a[0] 和 a[‘0’] 都是等效为 a[‘0’]，后边的 a[c] 覆盖了 a[b]</p></blockquote><h3 id="2-2-对象的-key-为对象时会转换为-Object-Object"><a href="#2-2-对象的-key-为对象时会转换为-Object-Object" class="headerlink" title="2.2 对象的 key 为对象时会转换为[Object Object]"></a>2.2 对象的 key 为对象时会转换为[Object Object]</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  b <span class="token operator">=</span> <span class="token punctuation">{</span>    m<span class="token punctuation">:</span> <span class="token string">'1'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  c <span class="token operator">=</span> <span class="token punctuation">{</span>    n<span class="token punctuation">:</span> <span class="token string">'2'</span>  <span class="token punctuation">}</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'artoria'</span>a<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'saber'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><blockquote><p>输出结果为 ‘saber’，此时对象的 key 为对象时，key 会转换为字符串，值显示为 [Object Object]，发生 a[c] 覆盖 a[b]</p></blockquote><h2 id="3-堆栈内存的使用"><a href="#3-堆栈内存的使用" class="headerlink" title="3. 堆栈内存的使用"></a>3. 堆栈内存的使用</h2><ul><li>例题 1：注意 alert 的使用，alert 输出的都是 <code>字符串</code></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>  A <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><blockquote><p>考察要点：</p><ol><li>alert 输出字符串</li><li>执行上下文</li><li>堆内存的使用</li></ol><p>分析：</p><ol><li><p>执行 A(1)前的代码的全局对象属性有：</p><p>a = 0</p><p>b = 0</p><p>A = AAAFFF000</p></li><li><p>AAAFFF000 地址中存储的是 func A 中的代码</p></li><li><p>调用 A(1)，创建一个 ECStack（执行上下文）</p><p>a = 1</p><p>A = BBBFFF000</p><p>alert(a++) =&gt; ‘1’ 第一个输出</p></li><li><p>BBBFFF000 地址中存储的是 alert(a+ b++)</p></li><li><p>调用 A(2)，创建一个新的 ECStack</p><p>b = 2</p><p>alert(a + b++) = alert(2 + 2) =&gt; ‘4’</p></li><li><p>第一个 ECStack 中属性 A 保持引用，所以不会在调用完就被销毁，而第二个 ECStack 没用引用，调用完立即被销毁</p></li></ol></blockquote><ul><li>例题 2：面向对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>考察知识：</p><ol><li>面向对象</li><li>变量提升</li><li>堆内存</li><li>javaScript 运算符优先级</li></ol><p>分析：</p><ol><li><p>变量提升</p><p>getName = func{clg(5)} =&gt; func{clg(4)}</p><p>Foo = AAAFFF000</p></li><li><p>AAAFFF000 地址中存储的是 {getName=function(){clg(1)} return this}</p></li><li><p>执行 Foo.getName()，直接调用这个函数，输出为 2</p></li><li><p>执行 getName()，调用 window 环境下的 getName()，输出为 4</p></li><li><p>执行 Foo().getName()，此时找到 AAAFFF000 地址，修改了全局环境下的 getName =&gt; func{flg(1)}，并返回值为 window，输出为 1</p></li><li><p>执行 getName()，调用 window 环境下的 getName()，输出为 1</p></li><li><p>执行 new Foo.getName()，因为成员访问的优先级为 1，而无参数列表的 new 优先级为 18，因此先执行 Foo.getName()，再 new 结果，即 new 2，输出为 2</p></li><li><p>执行 new Foo().getName()，带参数列表的 new 和 成员访问优先级都为 1，从左向右执行，new Foo() 创建了一个 Foo 的实例对象，成员访问的时候调用的是 Foo 的原型上的方法 ，即执行 Foo.prototype.getName()，输出为 3</p></li><li><p>执行 new new Foo().getName()，执行顺序为 new (new Foo.getName)，输出结果为 3</p></li></ol></blockquote><ul><li>例题 3：EventLoop 事件队列</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 start'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async1 end'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">async2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'async2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script start'</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setTimeout'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">async1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise1'</span><span class="token punctuation">)</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'promise2'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'script end'</span><span class="token punctuation">)</span></code></pre><blockquote><p>考察知识：事件队列</p><ol><li>浏览器是多线程的，但 JavaScript 是单线程的</li><li>JavaScript 中同步任务优先执行，异步任务等待同步任务执行完毕再执行</li><li>异步任务中微任务早于宏任务执行</li></ol><p>分析：</p><ol><li>创建 async1() 函数和 async2() 函数</li><li>执行 console.log(‘script start’)</li><li>setTimeout 定时器是宏任务，等待同步任务和微任务执行完毕再执行</li><li>执行 async1() 函数，输出 async1 start，执行 await async2()，输出 async2，后边的代码等待 async2 的结果返回在执行，即扔进微任务的队列等待执行。</li><li>执行 new Promise() 中的 EC 函数，即 console.log(‘promise1’)，Promise.then()中的函数扔进微任务的队列等待执行。</li><li>执行 console.log(‘script end’)，此时同步任务都执行完毕。</li><li>先去微任务队列中查找任务，一般是按照队列先进先出的方式（部分浏览器可能后进先出），执行 console.log(‘async1 end’)，再执行 Promise.then() 中的函数 console.log(‘promise2’)</li><li>此时微任务执行完毕，执行宏任务队列中的任务，输出 ‘setTimeout’</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css的常见布局</title>
      <link href="/2020/07/23/css-de-chang-jian-bu-ju/"/>
      <url>/2020/07/23/css-de-chang-jian-bu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h1><h2 id="1-多行多列布局"><a href="#1-多行多列布局" class="headerlink" title="1. 多行多列布局"></a>1. 多行多列布局</h2><ul><li><p>主要通过百分比宽度来实现多列的效果</p></li><li><p>宽度的占比通过要求的列数来进行计算获取</p></li><li><p>多行两列布局的实现</p></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    两行多列布局    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>111<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>222<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>333<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>444<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>555<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul </span><span class="token punctuation">{</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">48%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li<span class="token pseudo-class">:nth-child(even)</span> </span><span class="token punctuation">{</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">4%</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>通过设置每个元素的宽度为 48%，偶数元素带有左间隔来实现效果。</p></blockquote><ul><li>多行多列的实现</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    多行多列布局    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> aliceblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul </span><span class="token punctuation">{</span>  <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">33.3333%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li<span class="token pseudo-class">:nth-child(3n + 1)</span> </span><span class="token punctuation">{</span>  <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">ul li <span class="token class">.com</span> </span><span class="token punctuation">{</span>  <span class="token property">height</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li>在 li 标签中添加了一个 div 来包裹元素，是为了在给 li 标签设置 padding-left 的时候不会渲染间隔的颜色</li><li>在 怪异盒模型下设置 padding 而不是 margin 是因为 padding 为内边距，不会重新计算盒子的大小而 margin 会。</li></ol></blockquote><h2 id="2-圣杯布局"><a href="#2-圣杯布局" class="headerlink" title="2.圣杯布局"></a>2.圣杯布局</h2><p>​ 圣杯布局中最主要的是主体部分三个并列的 div，通过浮动和负的 margin 值来实现的布局。</p><ul><li>center 这个显示中间部分的 div 要放在最前面。</li><li>在主体部分的父级 div 中设置 padding 来决定 left 和 right 部分的位置。<code>padding: 0 100px 0 130px</code></li><li>在怪异盒模型下 center 盒子 <code>width:100%</code> 计算取值时不会将 padding 的值计算入内</li><li>left 部分通过 <code>margin-left:-100%</code> 向上偏移到 center 盒子的最左边，在通过 <code>position:relative</code> 相对于此时的位置向左偏移到 padding 设置的位置</li><li>right 部分通过 <code>margin-right: -130px</code> 偏移到 padding 设置的位置</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>圣杯布局顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间自适应宽度注意这个 center 在 left之前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>圣杯布局底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">100</span>px <span class="token number">0</span> <span class="token number">130</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span>,<span class="token class">.center</span>,<span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">130</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>  <span class="token property">margin-right</span><span class="token punctuation">:</span> -<span class="token number">100</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>通过定位实现</li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">100</span>px <span class="token number">0</span> <span class="token number">130</span>px<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span>,<span class="token class">.center</span>,<span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>position: absolute 会脱离文档流，也即其他的元素会 “无视” 它</p></blockquote><h2 id="3-双飞翼布局"><a href="#3-双飞翼布局" class="headerlink" title="3. 双飞翼布局"></a>3. 双飞翼布局</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>双飞翼布局顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center-in<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间自适应宽度注意这个 center 在 left之前<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>双飞翼布局底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* clear: both;  overflow: hidden; */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span>,<span class="token class">.center</span>,<span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> <span class="token class">.center-in</span> </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">100</span>px <span class="token number">0</span> <span class="token number">130</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">130</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span>  <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">130</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><ol><li>在 center 元素内部用一个 div 包裹，在内部的 div 设置 margin。</li><li>通过 margin-left 在 float 下会向上偏移来实现</li></ol></blockquote><h2 id="4-弹性布局"><a href="#4-弹性布局" class="headerlink" title="4.弹性布局"></a>4.弹性布局</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>弹性布局顶部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中间自适应宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>右边固定宽度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>弹性布局底部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.container</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.header</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">80</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.main</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">130</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> violet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">150</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> coral<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.footer</span> </span><span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> black<span class="token punctuation">;</span>  <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="5-栅格布局"><a href="#5-栅格布局" class="headerlink" title="5. 栅格布局"></a>5. 栅格布局</h2>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语学习</title>
      <link href="/2020/07/22/ri-yu-xue-xi/"/>
      <url>/2020/07/22/ri-yu-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="日语学习"><a href="#日语学习" class="headerlink" title="日语学习"></a>日语学习</h1><h2 id="1-输入语法"><a href="#1-输入语法" class="headerlink" title="1. 输入语法"></a>1. 输入语法</h2><ol><li>促音 <code>っ</code><ol><li>使用 <code>ltu</code> 或 <code>xtu</code></li><li>双重输入后一发音的第一个字母 <code>がっき</code> ： <code>gakki</code></li></ol></li></ol><h2 id="2-句型语法"><a href="#2-句型语法" class="headerlink" title="2. 句型语法"></a>2. 句型语法</h2><p><strong>名词 + 【です】构成 名词谓语句</strong></p><p><strong>动词谓语句可分为存在句和所在句</strong></p><ol><li><p>肯定：……　は　……　です</p><blockquote><p>わたしは王（おう）です。</p></blockquote></li><li><p>否定：……　は　……　ではありません</p><blockquote><p>先生は中国人（ちゅうごくじん）ではありません。</p></blockquote></li><li><p>疑问：……　は　……　ですか \ ですね</p><blockquote><p>鈴木（すずき）さんは学生（がくせい）ですか？</p><p>​ 肯定回答： はい、そうです。</p><p>​ 否定回答：違（ちがい）います。</p><p>​ 　そうではありません。</p><p>​ 学生（がくせい）ではありません。</p></blockquote></li><li><p>“也”：……　も　……　です、……　も　……　も　……　です</p><blockquote><p>木村（きむら）さんも工業大学（こうぎょうだいがく）の大学院生（だいがくいんせい）です。</p></blockquote></li><li><p>过去式肯定句：……　でした 表示曾经是</p><blockquote><p>父（ちち）はサッカー選手（せんしゅ）でした</p><p>​ サッカー：足球运动员</p><p>母（はは）は　昔（むかし）、家庭主婦（かていしゅふ）ではありません　でした。女優（じょゆう）でした。</p></blockquote></li><li><p>拥有：……　は　……　がいます</p><blockquote><p>李（り）さんは弟（おとうと）がいます</p></blockquote></li><li><p>没有：……　は　……　がいません</p><blockquote><p>王（おう）さんは兄弟（きょうだい）がいません</p></blockquote></li><li><p>句子并列：……　で　……　です</p><blockquote><p>姉（あね）　は　会社員（かいしゃいん）で、妹（いもうと）　は　学生（がくせい）です</p></blockquote></li><li><p>名词并列：……　と　……</p><blockquote><p>兄（あに）　と　弟（おとうと）がいます</p></blockquote></li><li><p>存在动词 「あります　/　います」表示人或事物的存在</p></li><li><p>存在句</p><p>用途：存在句着重描述在某场存在某事物</p><ol><li>「に」接于场所名词后，表示存在的场所</li><li>「が」接于名词后表示存在的事物</li><li>「います」表示存在主体为人或动物等能自由移动的事物</li><li>「あります」表示存在主体为人或动物以外的、固定在某处的事物</li><li>存在句往往以存在场所为主体，形式为「には」</li><li>「も」用在事物的名词后，表示该场所还有其他事物</li></ol><blockquote><p>例句</p><ol><li>図書室（としょしつ）には　パソコン　や　コピー機　もあります　 图书馆也有电脑和复印机</li><li>庭（にわ）に　桜（さくら）の　木（き）　があります</li><li>部屋（へや）には　男（おとこ）の　子（こ）　がいます</li><li>研究室（けんきゅうしつ）　には　コピー機（き）　がありません</li><li>図書室（としょしつ）　にも　パソコン　や　コピー機　があります　　图书室中还有电脑和复印机</li></ol></blockquote></li><li><p>所在句</p><p>用途：说明某事物所在的位置</p><ol><li>提出某事物作为主题，用「…は」的形式表示</li><li>所在的场所用「…に」的形式表示</li><li>疑问词「何（なに）」（什么、什么东西），以及「だれ」（谁、什么人），加上助词「も」，与否定的谓语搭配使用，表示全面否定，意思是什么也没有，一个人也没有。</li></ol><blockquote><p>例句：</p><ol><li><p>コピー機　は　　図書室（としょしつ）　にあります</p></li><li><p>猫（ねこ）は　テーブル　の　下（した）　にいます</p></li><li><p>先生　はいつも　その　部屋（へや）　にいます</p></li><li><p>佐藤先生　の　部屋　は　どこですか</p></li><li><p>A：郵便局（ゆうびんきょく）は　どこですか</p><p>B：銀行（ぎんこう）の　隣（となり）です</p></li><li><p>A：王（おう）さん　は　どこですか</p><p>B：王さん　は　今（いま）、大学（だいがく）にいません。大阪（おおさか）にいます</p></li><li><p>かばん　には　何（なに）もありません</p></li><li><p>A：吉田（よしだ）さん　は　研究室（けんきゅうしつ）　にいますか</p><p>B:　いいえ、研究室　二は　だれもいません</p></li></ol></blockquote></li></ol><h2 id="3-日常问候语句"><a href="#3-日常问候语句" class="headerlink" title="3. 日常问候语句"></a>3. 日常问候语句</h2><p>​ 【注意点】：1. 句子越短表示与说话人关系越近</p><ol><li><p>初次见面，我姓陈</p><blockquote><p>はじめましで、陳です。</p></blockquote></li><li><p>请多关照</p><blockquote><p>どうぞよろしくお願いします。</p><p>どうぞよろしく。</p><p>よろしく。</p></blockquote></li><li><p>我这边才要多多关照呢</p><blockquote><p>こちらこそよろしくお願いします。</p><p>こちらこそよろしく。</p></blockquote></li><li><p>我了解了，这样啊</p><blockquote><p>そうですか</p></blockquote></li><li><p>你好</p><blockquote><p>こにちは</p></blockquote></li><li><p>早上好（当天第一次见面）</p><blockquote><p>おはようございます。</p><p>おはよう</p></blockquote></li><li><p>晚上好</p><blockquote><p>こにちは</p><p>こんばんは</p></blockquote></li><li><p>谢谢</p><blockquote><p>ありがとうございます</p><p>ありがとう</p></blockquote></li><li><p>好久不见</p><blockquote><p>お久（ひさ）しぶりですね</p></blockquote></li><li><p>好久不见，身体好吗</p><blockquote><p>しばらくでしたね。お元気（げんき）ですか</p></blockquote></li><li><p>拖您的福</p><blockquote><p>お陰様（かげさま）で</p></blockquote></li><li><p>前些日子多谢招待</p><blockquote><p>このあいだどうもありがとうございました</p></blockquote></li><li><p>替我向 …… 问好</p><blockquote><ol><li><p>お父（とう）さんに　よろしく。</p><p>​ ありがとうございます。</p></li><li><p>佐藤先生（さとうせんせい）に　よろしく　お伝（つた）えください。</p><p>​ はい、お伝（つた）えします。</p></li></ol></blockquote></li></ol><h2 id="4-数字表示"><a href="#4-数字表示" class="headerlink" title="4. 数字表示"></a>4. 数字表示</h2><ul><li><p>1-5：</p><blockquote><p>​ 1：いち</p><p>​ 2：に</p><p>​ 3：さん</p><p>​ 4：よん　/　し</p><p>​ 5：ご</p></blockquote></li><li><p>6-10:</p><blockquote><p>​ 6：ろく</p><p>​ 7：しち　/　なな</p><p>​ 8：はち</p><p>​ 9：きゅう　/　く</p><p>​ 10：じゅう</p></blockquote></li><li><p>100、1000、？？</p><blockquote><p>​ 100：ひゃく</p><p>​ 1000：せん</p><p>​ ？？：なん</p></blockquote></li><li><p>实例</p><blockquote><p>eg：岁：歳（さい）</p><p>​ 一歳（いっさい）</p><p>​ 五歳（ごさい）</p><p>​ 三十歳（さんじっさい）</p><p>​ 例外：二十歳（はたち）</p></blockquote></li></ul><h2 id="5-星期表示"><a href="#5-星期表示" class="headerlink" title="5. 星期表示"></a>5. 星期表示</h2><ol><li>星期日：日曜日（にちようび）</li><li>星期一：月曜日（げつようび）</li><li>星期二：火曜日（かようび）</li><li>星期三：水曜日（すいようび）</li><li>星期四：木曜日（もくようび）</li><li>星期五：金曜日（きんようび）</li><li>星期六：土曜日（どようび）</li><li>星期几：何耀日（なんようび）</li></ol><h2 id="6-礼貌语言"><a href="#6-礼貌语言" class="headerlink" title="6. 礼貌语言"></a>6. 礼貌语言</h2><ol><li><code>ご</code>　表示对听话人的尊重</li></ol><blockquote><p>ご兄弟（きょうだい）</p><p>ご両親（りょうしん）</p><p>ご家族（かぞく）</p></blockquote><ol start="2"><li><p>问询多少人</p><blockquote><p>何人（なんにん）兄弟</p><p>​ 回答：一个人：一人（ひとり）</p><p>​ 两个人：二人（ふたり）</p><p>​ 三个人：三人（さんにん）</p><p>​ 四个人：四人（よんにん）</p></blockquote></li></ol><h2 id="7-指示词"><a href="#7-指示词" class="headerlink" title="7. 指示词"></a>7. 指示词</h2><h3 id="7-1-これ、それ、あれ"><a href="#7-1-これ、それ、あれ" class="headerlink" title="7.1 これ、それ、あれ"></a>7.1 これ、それ、あれ</h3><p>​ これ、それ、あれ 是指示事物的名词，相当于汉语的 “这、这个“，”那，那个“</p><ul><li>これ：距离 <strong>说话人</strong> 较近的事物</li><li>それ：距离 <strong>听话人</strong> 较近的事物</li><li>あれ：距离 <strong>说话人和听话人</strong> 都比较远的事物</li></ul><blockquote><p>例句</p><ol><li>これ　は　本（ほん）　です。 这是书。</li><li>それ　は　かばん　 です。 那是包。</li><li>あれ　は　テレビ　 です。 那是电视机。</li></ol></blockquote><h3 id="7-2-この、その、あの"><a href="#7-2-この、その、あの" class="headerlink" title="7.2 この、その、あの"></a>7.2 この、その、あの</h3><p>​ この、その、あの　是用来修饰名称的，相当于汉语的 “这、这个“，”那，那个“</p><blockquote><p>例句</p><ol><li>この　カメラ　は　スミスさんのです。 这个照相机是史密斯先生的。</li><li>その　自転車（じてんしゃ）　は　森（もり）さんのです。 那辆自行车是森先生的。</li><li>あの　ノート　は　だれのですか。 那个笔记本是谁的？</li></ol></blockquote><h3 id="7-3-だれですか、何（なん）ですか、どなた"><a href="#7-3-だれですか、何（なん）ですか、どなた" class="headerlink" title="7.3 だれですか、何（なん）ですか、どなた"></a>7.3 だれですか、何（なん）ですか、どなた</h3><ul><li><p>不知道是什么人时用　だれ　, 不知道是什么事物用　何（なん） 询问，相当于汉语的 “谁” 和 “什么”。</p></li><li><p>对尊长或比自己地位高的人用　どなた　询问</p></li><li><p>句尾后续助词　か　,一般读升调。</p></li></ul><blockquote><p>例句</p><ol><li>それは　何（なん）　ですか。 那是什么？</li><li>あの　人（ひと）は　だれ　ですか。 那个人是谁？</li><li>スミスさんは　どなた　ですか。 史密斯先生是哪位？</li></ol></blockquote><h3 id="7-4-どれ、どの"><a href="#7-4-どれ、どの" class="headerlink" title="7.4 どれ、どの"></a>7.4 どれ、どの</h3><p>​ どれ　どの　是在三个以上的事物中，不能确定是哪一个时所用的疑问句。</p><blockquote><p>例句</p><ol><li>森（もり）さんの　かばん　は　どれ　ですか。 森先生的包是哪个？</li><li>長島（ながしま）さんの　傘（かさ）　は　どれ　ですか。 长岛先生的伞是哪一把？</li><li>小野（おの）さんの　机（つくえ）　は　どの　机（つくえ）　ですか。 小野女士的桌子是哪一张？</li></ol></blockquote><h3 id="7-5-ここ、そこ、あそこ、どこ"><a href="#7-5-ここ、そこ、あそこ、どこ" class="headerlink" title="7.5 ここ、そこ、あそこ、どこ"></a>7.5 ここ、そこ、あそこ、どこ</h3><p>「 ここ、そこ、あそこ、どこ」是一组表示场所的指示词。</p><ul><li><p>ここ 指说话人所在的场所</p></li><li><p>そこ 指说话人所在的场所</p></li><li><p>あそこ 指离双方都有一定距离，而双方都能看到的场所</p></li><li><p>どこ 表示疑问</p></li><li><p>当两人在一起时，</p><ul><li>双方共同所处的场所使用「ここ」</li><li>稍远的场所使用「そこ」</li><li>更远的、目光所及的场所使用「あそこ」</li></ul><blockquote><p>例句</p><ol><li>ここ　は　佐藤先生（さとうせんせい）の　研究室（けんきゅうしつ）です</li><li>そこ　の　机（つくえ）　は　だれ　の　机　ですか</li><li>あそこ　は　映画館（えいがかん）　です</li><li>どこ　が　佐藤先生（さとうせんせい）の　研究室（けんきゅうしつ）ですか</li></ol></blockquote></li></ul><h2 id="8-表达场所"><a href="#8-表达场所" class="headerlink" title="8 .表达场所"></a>8 .表达场所</h2><ul><li><p>后缀 [—館（かん） ] 和 [—室（しつ） ] 可以构成场所名词</p><blockquote><p>博物馆： 博物館（はくぶつかん）</p><p>电影院： 映画館（えいがかん）</p><p>研究室： 研究室（けんきゅうしつ） 教师工作的办公室</p><p>办公室： 事務室（じむしつ） 处理行政工作的办公室</p><p>图书室： 図書室（としょしつ）</p><p>资料室： 資料室（しりょうしつ）</p><p>候车室、候机室、候诊室：　待合室（まちあいしつ）</p></blockquote></li><li><p>方位名词</p><blockquote><p>上：上（うえ）</p><p>下：下（した）</p><p>左：左（ひだり）</p><p>右：右（みぎ）</p></blockquote><blockquote><p>前面：前（まえ）</p><p>后面：後ろ（うしろ）</p><p>旁边：そば</p><p>隔壁：となり</p></blockquote><blockquote><p>里面：中（なか）</p><p>外面：外（そと）</p></blockquote></li></ul><h2 id="9-数词"><a href="#9-数词" class="headerlink" title="9. 数词"></a>9. 数词</h2><ul><li><p>泛指各种物体的数量词，计数成块的东西，也可用于数数，有时用于年龄</p><blockquote><p>一（ひと）つ　二（ふた）つ　三（みっ）つ　四（よっ）つ　　五（いつ）つ</p><p>六（むっ）つ　七（なな）つ　八（やっ）つ　九（ここの）つ　十（とお）</p><p>いくつ？</p><p>「ま行」「や行」开头的后缀，数字后半部分变促音</p></blockquote></li><li><p>指代大件物品，例如汽车、冰箱等　相当于汉语的 “辆” 或 “台”</p><blockquote><p>一台（いちだい）　二台（にだい）　三台（さんだい）　四台（よんだい）</p><p>五台（ごだい）　六台（ろくだい）　七台（しちだい）　八台（はちだい）</p><p>九台（きゅうだい）　十台（じゅうだい）　何台（なんだい）</p></blockquote></li><li><p>指代书籍，相当于汉语的 “本”，“册”</p><blockquote><p>一冊（いちさつ）　二冊（にさつ）　三冊（さんさつ）　四冊（よんさつ）</p><p>五冊（ごさつ）　 六冊（ろくさつ）　七冊（ななさつ）　八冊（はっさつ）</p><p>九冊（きゅうさつ） 十冊（じっさつ）　何冊（なんさつ）</p><p>「サ行」开头的后缀，数字的后半部分都会变成促音。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 日语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法（二）</title>
      <link href="/2020/07/19/shu-ju-jie-gou-yu-suan-fa-er/"/>
      <url>/2020/07/19/shu-ju-jie-gou-yu-suan-fa-er/</url>
      
        <content type="html"><![CDATA[<h2 id="9-树"><a href="#9-树" class="headerlink" title="9. 树"></a>9. 树</h2><h3 id="9-1-树的概论"><a href="#9-1-树的概论" class="headerlink" title="9.1 树的概论"></a>9.1 树的概论</h3><ul><li><p>树的特点</p><ul><li>树通常有一个根. 连接着根的是树干。</li><li>树干到上面之后会进行分叉成树枝, 树枝还会分叉成更小的树枝。</li><li>在树枝的最后是叶子。</li></ul></li><li><p>树的优点</p><ul><li>空间利用率高</li><li>树中的元素是有序的</li><li>树结构是非线性的，可以表示一对多的关系</li></ul></li><li><p>树的定义：n (n &gt;= 0) 个结点构成的有限集合</p></li><li><p>树的术语</p><ul><li>结点的度（Degree）：结点的子树个数</li><li>树的度：树的所有结点中最大的度数</li><li>叶结点（Leaf）：度为 0 的结点</li><li>父结点（ParentNode）：有子树的结点是其子树的根节点的父结点</li><li>子结点（ChildNode）：若 A 结点是 B 结点的父结点，则称 B 结点是 A 结点的子结点。</li><li>兄弟结点（SiblingNode）：具有同一父结点的各结点彼此是兄弟结点</li><li>结点的层次（Level）：规定根结点在 1 层，其他任一结点的层数是其父结点的层数加 1.</li><li>树的深度（Depth）：树中所有结点的最大层次式这棵树的深度</li></ul></li><li><p>树的表示方式</p><ul><li>树的普通表示方法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data  <span class="token punctuation">}</span>  leftChild <span class="token operator">=</span> <span class="token keyword">null</span>  rightChild <span class="token operator">=</span> <span class="token keyword">null</span>  middleChild <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 结点不一定包含上述的三个子结点，不容易确定结点的代码</span></code></pre><ul><li>儿子 – 兄弟表示法（转换成二叉树）</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data  <span class="token punctuation">}</span>  leftChild <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 指向最左的子结点</span>  sibiling <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment" spellcheck="true">// 指向 leftChild 的兄弟结点</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="9-2-二叉树"><a href="#9-2-二叉树" class="headerlink" title="9.2 二叉树"></a>9.2 二叉树</h3><ul><li><p>二叉树的定义：树中每个节点最多只能有两个子结点</p></li><li><p>二叉树的特性：一个二叉树第 i 层的最大结点数为：2^(i-1), i &gt;= 1;</p></li><li><p>深度为 k 的二叉树有最大结点总数为： 2^k - 1, k &gt;= 1;</p></li><li><p>对任何非空二叉树 T，若 n0 表示叶结点的个数、n2 是度为 2 的非叶结点个数，那么两者满足关系 n0 = n2 + 1。</p></li><li><p>链表存储是二叉树最常用的表示方法</p><ul><li>每一个节点封装成一个 Node</li><li>Node 中包含存储的数据，左节点的引用，右节点的引用</li></ul></li><li><p>二叉树的三种遍历方式</p><ul><li>先序遍历（根左右）</li><li>中序遍历（左根右）</li><li>后续遍历（左右根）</li></ul></li></ul><h4 id="9-2-1-二叉排序树"><a href="#9-2-1-二叉排序树" class="headerlink" title="9.2.1 二叉排序树"></a>9.2.1 二叉排序树</h4><ul><li>BST（Binary Search Tree），也称为二叉查找树或二叉搜索树</li><li>二叉排序树的性质：<ul><li>非空左子树的所有键值小于其根结点的键值</li><li>非空右子树的所有键值大于其根结点的键值</li><li>左、右子树本身也是二叉排序树</li></ul></li></ul><blockquote><p>二叉排序树的特点就是相对较小的值总是保存在左节点上，相对较大的值总是保存在右节点上</p></blockquote><ul><li>二叉排序树数据存储使用的就是 <code>二分查找</code> 的思想</li><li>二叉树封装的实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 数据节点</span>  <span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// 方法</span><span class="token punctuation">}</span></code></pre><ul><li>插入功能的实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 插入</span><span class="token comment" spellcheck="true">// 向外暴露的 插入方法</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 创建一个 数据节点对象</span>  <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 树非空 判断</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> newNode  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内部执行的插入方法</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insertNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key <span class="token operator">></span> newNode<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 向左子树 插入数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 左节点 非空 判断</span>      node<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 向右子树 插入数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 右节点 非空 判断</span>      node<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>遍历的实现</p><ul><li>先序遍历</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 先序遍历</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>preOrderTraversal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内部执行的 先序遍历方法</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>preOrderTraversalNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">preOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试代码</span><span class="token keyword">var</span> preResultStr <span class="token operator">=</span> <span class="token string">''</span>bst<span class="token punctuation">.</span><span class="token function">preOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  preResultStr <span class="token operator">+</span><span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>preResultStr<span class="token punctuation">)</span></code></pre><ul><li>中序遍历</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 中序遍历</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>midOrderTraversal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">midOrderTraversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内部执行的 中序遍历方法</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>midOrderTraversalNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">midOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">midOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试代码</span><span class="token keyword">var</span> midResultStr <span class="token operator">=</span> <span class="token string">''</span>bst<span class="token punctuation">.</span><span class="token function">midOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  midResultStr <span class="token operator">+</span><span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>midResultStr<span class="token punctuation">)</span></code></pre><ul><li>后序遍历</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 后序遍历</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pastOrderTraversal <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pastOrderTraversalNode</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 内部执行的 后序遍历方法</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pastOrderTraversalNode <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pastOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pastOrderTraversalNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> handler<span class="token punctuation">)</span>    <span class="token function">handler</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>key<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试代码</span><span class="token keyword">var</span> pastResultStr <span class="token operator">=</span> <span class="token string">''</span>bst<span class="token punctuation">.</span><span class="token function">pastOrderTraversal</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  pastResultStr <span class="token operator">+</span><span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">' '</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pastResultStr<span class="token punctuation">)</span></code></pre></li><li><p>查找最大值最小值</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 查找 最大值</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>max <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root  <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    node <span class="token operator">=</span> node<span class="token punctuation">.</span>right  <span class="token punctuation">}</span>  <span class="token keyword">return</span> node<span class="token punctuation">.</span>key<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 查找 最小值</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>min <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root  <span class="token keyword">while</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    node <span class="token operator">=</span> node<span class="token punctuation">.</span>left  <span class="token punctuation">}</span>  <span class="token keyword">return</span> node<span class="token punctuation">.</span>key<span class="token punctuation">}</span></code></pre><ul><li>查找是否存在特定的值</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 查找 是否存在 特定的 key值</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root  <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>right    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><ul><li>删除节点 方法的实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 删除 节点的方法</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root  <span class="token keyword">var</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root  <span class="token keyword">var</span> isLeftNode <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 1. 查找 要被删除的节点</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key <span class="token operator">!==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    parent <span class="token operator">=</span> current    <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>key <span class="token operator">></span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>left      isLeftNode <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>right      isLeftNode <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 根据对应情况 删除节点</span>  <span class="token comment" spellcheck="true">// 2.1 要删除的节点 是 叶子节点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> current<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.1.1 删除的是左子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2.2 要删除的节点 有一个子结点</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.2.1 要删除的节点拥有 左子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.2.1.1 要删除的节点 是父结点的左子节点</span>      parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>left    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>left    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.2.2 要删除的是 右子节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>right    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2.3 要删除的节点 有两个子结点</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> precursor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrecursor</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断是否是 根结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>root <span class="token operator">=</span> precursor    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isLeftNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>left <span class="token operator">=</span> precursor    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      parent<span class="token punctuation">.</span>right <span class="token operator">=</span> precursor    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 将 删除的右子树 赋给 前驱的右子树</span>    precursor<span class="token punctuation">.</span>right <span class="token operator">=</span> current<span class="token punctuation">.</span>right  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取前驱的方法</span>BinarySearchTree<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getPrecursor <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>delNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> precursor <span class="token operator">=</span> delNode  <span class="token keyword">var</span> precursorParent <span class="token operator">=</span> delNode  <span class="token keyword">var</span> current <span class="token operator">=</span> delNode<span class="token punctuation">.</span>left  <span class="token comment" spellcheck="true">// 查找 左子树中的 最右节点</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    precursorParent <span class="token operator">=</span> precursor    precursor <span class="token operator">=</span> current    current <span class="token operator">=</span> current<span class="token punctuation">.</span>right  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 查找 到的前驱 还有子结点</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>precursor <span class="token operator">!=</span> delNode<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>    precursorParent<span class="token punctuation">.</span>right <span class="token operator">=</span> precursor<span class="token punctuation">.</span>left    precursor<span class="token punctuation">.</span>left <span class="token operator">=</span> delNode<span class="token punctuation">.</span>left  <span class="token punctuation">}</span>  <span class="token keyword">return</span> precursor<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中的面向对象语法</title>
      <link href="/2020/07/17/js-zhong-de-mian-xiang-dui-xiang-yu-fa/"/>
      <url>/2020/07/17/js-zhong-de-mian-xiang-dui-xiang-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象的程序设计"><a href="#面向对象的程序设计" class="headerlink" title="面向对象的程序设计"></a>面向对象的程序设计</h1><h2 id="6-1-理解对象"><a href="#6-1-理解对象" class="headerlink" title="6.1 理解对象"></a>6.1 理解对象</h2><h3 id="6-1-1-对象的定义"><a href="#6-1-1-对象的定义" class="headerlink" title="6.1.1 对象的定义"></a>6.1.1 对象的定义</h3><ul><li>对象可以是一个无序属性的集合，其属性可以包含基本值、对象或者函数。</li><li>对象可以是一组没有特定顺序的值。</li><li>对象可以是散列表，无非就是一组名值对。</li><li>每个对象都是基于一个引用类型创建的。</li></ul><h3 id="6-1-2-属性类型"><a href="#6-1-2-属性类型" class="headerlink" title="6.1.2 属性类型"></a>6.1.2 属性类型</h3><h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h4><p>数据类型定义了 4 个描述其行为的特性：</p><ul><li>[[ Configurable ]]：表示能否删除属性，修改属性的特性，把属性修改成访问器属性，默认为 true</li><li>[[ Enumerable ]]：表示能否通过 for-in 循环返回属性，默认为 true</li><li>[[ Writable ]] ：表示能否修改属性的值，默认为 true</li><li>[[ Value ]]：包含这个属性的数据值，默认为 undefined</li></ul><p><code>Object.defineProperty()</code> 方法：修改属性默认的特性，接收三个参数</p><ul><li>属性所在的对象</li><li>属性的名字</li><li>描述符的对象（这个对象的属性必须是 <code>configurable</code> 、<code>enumerable</code>、<code>writable</code> 和 <code>value</code>）</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  value<span class="token punctuation">:</span> <span class="token string">'saber'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 情况1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// saber</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'artoria'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// saber</span><span class="token comment" spellcheck="true">// 情况2</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>nameconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// saber</span><span class="token comment" spellcheck="true">// 情况3</span>Object<span class="token punctuation">.</span><span class="token function">defineProPerty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  value<span class="token punctuation">:</span> <span class="token string">'saber'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//抛出错误</span></code></pre><p>​ 解析：</p><ul><li><code>writable</code> 属性设置为 false 后，它的值 “saber” 是只读的，不可修改的。</li><li><code>configurable</code> 属性设置为 false 后，表示不能从对象中删除属性。</li><li>把 <code>configurable</code> 属性设置为 false 后，表示属性定义为不可配置。想把它变回可配置当然就会报错。</li></ul><h4 id="2-访问器属性"><a href="#2-访问器属性" class="headerlink" title="2.访问器属性"></a>2.访问器属性</h4><ul><li>访问器属性不包含数据值，他们包含一对 <code>getter</code> 和 <code>setter</code> 函数，其 4 个特性为：<ul><li>[[ Configurable ]]：表示能否删除属性，修改属性的特性，把属性修改成访问器属性，默认为 true</li><li>[[ Enumerable ]]：表示能否通过 for-in 循环返回属性，默认为 true</li><li>[[ Get ]]：在读取属性时调用的函数，默认为 undefined</li><li>[[ Set ]]：在写入属性时调用的函数，默认为 undefined</li></ul></li><li>访问器属性不能直接定义，必须使用 <code>Object.defineProperty()</code> 来定义。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token number">2004</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue      <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>book<span class="token punctuation">.</span>year <span class="token operator">=</span> <span class="token number">2005</span><span class="token function">alert</span><span class="token punctuation">(</span>book<span class="token punctuation">.</span>edition<span class="token punctuation">)</span></code></pre><p>解析：</p><ul><li><code>_year</code> 表示只能通过对象方法访问的 year 属性</li><li>getter 函数返回 _year 的值，setter 函数通过计算来确定正确的版本。</li><li>访问器属性的常见用法：设置一个属性的值会导致其他属性发生变化。</li><li>只指定 getter 意味着属性时不能写，只指定 setter 函数的属性也不能读。</li></ul><h3 id="6-1-3-定义多个属性"><a href="#6-1-3-定义多个属性" class="headerlink" title="6.1.3 定义多个属性"></a>6.1.3 定义多个属性</h3><ul><li><p><code>Object.defineProperties()</code> 方法可以通过描述符一次定义多个属性。</p></li><li><p>这个方法接收两个对象参数：</p><ul><li>要添加和修改其属性的对象 u</li><li>第二个对象的属性和第一个对象中要添加或修改的属性一一对应。</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token punctuation">{</span>  _year<span class="token punctuation">:</span> <span class="token punctuation">{</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token number">2004</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  edition<span class="token punctuation">:</span> <span class="token punctuation">{</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  year<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">></span> newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue        <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2014</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// {_year: 2004, edition: 1}</span></code></pre><h3 id="6-1-4-读取属性的特性"><a href="#6-1-4-读取属性的特性" class="headerlink" title="6.1.4 读取属性的特性"></a>6.1.4 读取属性的特性</h3><ul><li>通过 <code>Object.getOwnPropertyDescriptor()</code> 方法，可以取得给定属性的描述符</li><li>接收两个参数：<ul><li>属性所在的对象</li><li>要读取其描述符的属性名称</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 接 6.1.3 示例代码</span><span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'_year'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2004</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>configurable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> descriptor<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">'year'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>enumerable<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> descriptor<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// "function"</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript的小tips</title>
      <link href="/2020/07/17/javascript-de-xiao-tips/"/>
      <url>/2020/07/17/javascript-de-xiao-tips/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-常见问题"><a href="#JavaScript-常见问题" class="headerlink" title="JavaScript 常见问题"></a>JavaScript 常见问题</h1><h2 id="1-获取异步函数的值"><a href="#1-获取异步函数的值" class="headerlink" title="1. 获取异步函数的值"></a>1. 获取异步函数的值</h2><ul><li>通过回调函数的形式来获取</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> data1 <span class="token operator">=</span> <span class="token string">'saber'</span>    <span class="token function">callback</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data1<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="2-Promise"><a href="#2-Promise" class="headerlink" title="2. Promise"></a>2. Promise</h2><ul><li><p>回调地狱：当需要保证程序的执行顺序的时候，只能通过回调函数调用，但过多的回调函数调用会造成回调地狱。</p></li><li><p>Promise 是一个构造函数，相当于一个容器，这个容器中存放一个异步任务。</p></li><li><p>Promise 的三种状态：</p><ul><li>Pending</li><li>Resolved</li><li>Rejected</li></ul></li><li><p>Promise 本身不是异步，但内部往往封装一个异步。</p></li><li><p>调用 Promise 实例对象的 then 方法即是调用 Promise 构造函数中的形参中的函数。</p></li></ul><pre class=" language-javascript"><code class="language-javascript">a<span class="token punctuation">.</span>txtHello aaab<span class="token punctuation">.</span>txtHello bbb<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//失败调用</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 成功调用</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>  fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.txt'</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//失败调用</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 成功调用</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 成功了即调用 resolve 这个传递函数</span>  <span class="token comment" spellcheck="true">// 返回 Hello aaa</span>  <span class="token keyword">return</span> p2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 失败了即调用 reject 这个传递函数</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败了'</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 该方法会作为 p2 的 resolve</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 返回 Hello bbb</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="3-启动简易服务器"><a href="#3-启动简易服务器" class="headerlink" title="3.启动简易服务器"></a>3.启动简易服务器</h2><pre class=" language-shell"><code class="language-shell">hs -c-l -o</code></pre><p>默认端口号为 <code>8080</code></p><h2 id="4-将-arguments-对象转换为数组"><a href="#4-将-arguments-对象转换为数组" class="headerlink" title="4.将 arguments 对象转换为数组"></a>4.将 arguments 对象转换为数组</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> argArray <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span></code></pre><h2 id="5-apply、call、bind-的用法"><a href="#5-apply、call、bind-的用法" class="headerlink" title="5.apply、call、bind 的用法"></a>5.apply、call、bind 的用法</h2><ul><li>三者都用来重新定义 <code>this</code> 这个对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  objAge<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>  myFun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span>  objAge<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">,</span>  myFun<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'年龄'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">'，来自'</span> <span class="token operator">+</span> fm <span class="token operator">+</span> <span class="token string">'去往'</span> <span class="token operator">+</span> t<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> other <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'老王'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><ul><li>类型的区别：bind 方法返回的是一个全新的函数，需要调用才会执行，而 apply 和 call 方法都是对方法的调用</li></ul><pre class=" language-javascript"><code class="language-javascript">obj1<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//老王年龄18</span>obj1<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//老王年龄18</span>obj1<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//老王年龄18</span></code></pre><ul><li>传参的区别：第一个参数都是 this 的指向对象，第二个参数的区别如下<ul><li>call 的参数是直接放进去的，参数都用逗号分隔</li><li>apply 的所有参数都需要放在一个数组中</li><li>bind 的参数是直接放进去的，参数都用逗号分隔</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript">obj2<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 老王年龄18，来自成都去往上海</span>obj2<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 老王年龄18，来自成都去往上海</span>obj2<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> <span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 老王年龄18，来自成都去往上海</span>obj2<span class="token punctuation">.</span>myFun<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>other<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'成都'</span><span class="token punctuation">,</span> <span class="token string">'上海'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//老王年龄18，来自成都上海去往undefined</span></code></pre><h3 id="5-1-方法借用"><a href="#5-1-方法借用" class="headerlink" title="5.1 方法借用"></a>5.1 方法借用</h3><ul><li>借用 Math 的 max 和 min 方法求数组的最大最小值</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*    不能使用 call 方法，参数会被当成一个数组。    使用 apply 方法，参数是一个个数字。*/</span><span class="token keyword">var</span> maxOfArr <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//8</span><span class="token keyword">var</span> maxOfArr <span class="token operator">=</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// NaN</span><span class="token keyword">var</span> minOfArr <span class="token operator">=</span> Math<span class="token punctuation">.</span>min<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//3</span></code></pre><p>​ 上个知识点也是方法的借用</p><h2 id="6-条件短路"><a href="#6-条件短路" class="headerlink" title="6. 条件短路"></a>6. 条件短路</h2><p>​ 我们有如下代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>hungry<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">goToFridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>​ 我们可以进一步简化代码，同时使用变量和函数：</p><pre class=" language-javascript"><code class="language-javascript">hungry <span class="token operator">&amp;&amp;</span> <span class="token function">goToFridge</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="7-对条件使用或（OR）逻辑"><a href="#7-对条件使用或（OR）逻辑" class="headerlink" title="7. 对条件使用或（OR）逻辑"></a>7. 对条件使用或（OR）逻辑</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span> <span class="token punctuation">{</span>  arg1 <span class="token operator">=</span> arg1 <span class="token operator">||</span> <span class="token number">32</span><span class="token punctuation">}</span></code></pre><p>如果没有设置 arg1 的值，arg1 的值默认设为 32。</p><h2 id="8-过滤取得唯一值"><a href="#8-过滤取得唯一值" class="headerlink" title="8.过滤取得唯一值"></a>8.过滤取得唯一值</h2><p>可以使用带有 <code>扩展运算符</code> 的 <code>Set</code> 对象来创建一个仅包含唯一值的新数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> unique_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>unique_arr<span class="token punctuation">)</span></code></pre><h2 id="9-Set"><a href="#9-Set" class="headerlink" title="9.Set"></a>9.Set</h2><h2 id="10-localStorage-操作"><a href="#10-localStorage-操作" class="headerlink" title="10. localStorage 操作"></a>10. localStorage 操作</h2><ul><li>localStorage 用于在浏览器端持久化保存<code>键值对</code> 数据</li><li>写入用户硬盘，从硬盘中写入读出数据</li><li>localStorage 特点<ul><li>大小限制：5M(chrome)，更大数据可以使用 浏览器本地数据库（indexDB 或 webSql）</li><li>受同源访问限制，不能跨域访问</li><li>在浏览器隐私模式下无法使用</li><li>因为在本地保存，不会发送数据，网络爬虫无法抓取</li><li>只能存放字符串（JSON 字符串）</li></ul></li><li>localStorage 基本语法<ul><li>setItem(‘key’,’value’)</li><li>getItem(‘key’)</li><li>removeItem(‘key’)</li><li>clear()</li></ul></li></ul><h2 id="11-作用域与闭包问题"><a href="#11-作用域与闭包问题" class="headerlink" title="11. 作用域与闭包问题"></a>11. 作用域与闭包问题</h2><h3 id="11-1-函数的作用域"><a href="#11-1-函数的作用域" class="headerlink" title="11.1 函数的作用域"></a>11.1 函数的作用域</h3><ul><li>每次函数被重新调用，都会创建一个 <code>新的内存空间和地址</code> 。</li><li>延伸生命周期：当函数被外部引用（使用）时，通过这个引用调用函数不会创建新的内存空间，示例：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 每次被调用后当前内存空间被销毁</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">function</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">// 被外界引用不会被销毁</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 多层嵌套 内部没有被引用，所以调用会重新创建新的空间</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">function</span> <span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>m<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">ss</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>m<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><h3 id="11-2-块级作用域"><a href="#11-2-块级作用域" class="headerlink" title="11.2 块级作用域"></a>11.2 块级作用域</h3><ul><li><code>var</code> 没有块级作用域的特性，在块级作用域声明也会提升到全局</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 一秒钟后直接输出 4,4,4</span></code></pre><ul><li><code>let</code> 和 <code>const</code> 有块级作用域，在这个块中是独立的</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 一秒钟后直接输出 1,2,3</span><span class="token keyword">function</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">2</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 一秒钟后输出 2,2,2</span></code></pre><ul><li>模拟出 <code>var</code> 的伪块级作用域</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 一秒钟后输出 1,2,3</span><span class="token comment" spellcheck="true">// 解析：利用立即函数 将 window 下的 i 作为参数传入到函数体中，每一个  i 都在一个独立的作用域中</span></code></pre><h3 id="11-3-闭包"><a href="#11-3-闭包" class="headerlink" title="11.3 闭包"></a>11.3 闭包</h3><ul><li>闭包指的是： 能够访问另一个函数作用域变量的函数</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 利用闭包根据字段排序商品</span><span class="token keyword">var</span> cart <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'iphone'</span><span class="token punctuation">,</span> click<span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">8000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'ipad'</span><span class="token punctuation">,</span> click<span class="token punctuation">:</span> <span class="token number">80</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">4000</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'icoo'</span><span class="token punctuation">,</span> click<span class="token punctuation">:</span> <span class="token number">150</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token number">10000</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">function</span> <span class="token function">order</span><span class="token punctuation">(</span>filed<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> cart<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span>filed<span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span>filed<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 按价格升序排序</span><span class="token comment" spellcheck="true">// 利用闭包特性行，内部 cart 的 sort 方法可以访问外部函数的变量 filed</span></code></pre><ul><li>内存泄漏问题：<ul><li>当函数内部被使用时，其中的数据一直被占用不会被释放，当我们仅需要一部分数据时，可以把不需要的赋值为 null，来减少内存使用</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">desc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>artoria<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>artoria<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">desc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>saber<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>saber<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>  btns<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> desc <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'desc'</span><span class="token punctuation">)</span>    item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// artoria / saber</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    item <span class="token operator">=</span> <span class="token keyword">null</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// null</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>移动动画的案例：解决问题<ul><li>防抖</li><li>点击保持匀速</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector">button </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>click me<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// 每次点击都会创建一个新的 left，产生抖动</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">++</span> <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 解决点击抖动问题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">1</span>  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 闭包特性，可以访问到函数外部的 left，每次点击访问的都是 外部                 的 left</span>      btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">++</span> <span class="token operator">+</span> <span class="token string">'px'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 点击保持匀速 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> bind <span class="token operator">=</span> <span class="token boolean">false</span>  btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bind<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token number">1</span>      bind <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        btn<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token operator">++</span> <span class="token operator">+</span> <span class="token string">'px'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例习题</span><span class="token keyword">function</span> <span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">7</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token function">addCurry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>​ 当把 <code>addCurry</code> 函数的返回值赋给 add 的时候， <code>a = 7</code> 这个值就被捕获了，后边无论传递什么值都是跟 7 相加，所以值为 12</p><h2 id="12-写出项目目录结构"><a href="#12-写出项目目录结构" class="headerlink" title="12. 写出项目目录结构"></a>12. 写出项目目录结构</h2><p>使用 <code>mddir</code> 来生成项目目录结构</p><pre class=" language-dos"><code class="language-dos">npm install mddir --savecd node_modules/mddir/srcnode mddir "../../../"// 即根目录</code></pre><p>命令完成后，在 <code>node_modules/mddir/src</code> 下生成一个文件 <code>directoryList.md</code> ，但是不包括 node_modules 和 .git 文件。</p><h2 id="13-express-跨域问题"><a href="#13-express-跨域问题" class="headerlink" title="13. express 跨域问题"></a>13. express 跨域问题</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置允许跨域访问该服务.</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//Access-Control-Allow-Headers ,可根据浏览器的F12查看,把对应的粘贴在这里就行</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'Content-Type'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'PUT,GET,POST,DELETE,OPTIONS'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">)</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="14-任务执行顺序"><a href="#14-任务执行顺序" class="headerlink" title="14. 任务执行顺序"></a>14. 任务执行顺序</h2><h3 id="14-1-微任务"><a href="#14-1-微任务" class="headerlink" title="14.1 微任务"></a>14.1 微任务</h3><ul><li>定义：由语言标准提供的叫微任务。</li><li>语言标准：即是 ECMAScript。</li><li>类型：ES6 提供的 <code>promise.then</code> , <code>process.nextTick</code></li></ul><h3 id="14-2-宏任务"><a href="#14-2-宏任务" class="headerlink" title="14.2 宏任务"></a>14.2 宏任务</h3><ul><li>定义：宿主环境提供的叫宏任务。</li><li>类型：<ul><li>所有内建或自定义函数。</li><li>global 或 window 这个全局对象的属性或方法。</li><li><code>setTimeout</code> 、 <code>setInterval</code></li></ul></li><li>宿主环境：<code>global</code> 是 JavaScript 运行时所在宿主环境提供的全局对象。在浏览器中，没有实现 global 对象，而是通过 <code>window</code> 对象来指向 global，代替 global 称为全局对象。在 node 中，用到的全都是 JavaScript 的原生功能。</li></ul><blockquote><p>微任务早于宏任务执行，微任务和宏任务都是异步任务</p></blockquote><h3 id="14-3-同步任务"><a href="#14-3-同步任务" class="headerlink" title="14.3 同步任务"></a>14.3 同步任务</h3><ul><li>定义：在主线程上排队执行的任务，只有前面的任务执行完毕才能执行后一个任务。</li><li>例子：promise 实例执行的代码，全局范围下的 console.log</li></ul><h3 id="14-4-异步任务"><a href="#14-4-异步任务" class="headerlink" title="14.4 异步任务"></a>14.4 异步任务</h3><ul><li>定义：不进入主线程，而是进入 <code>任务队列</code> 的任务，只有主线程内的任务都执行完毕，才会去任务队列读取相应的函数，进入主线程执行。</li></ul><h2 id="15-Promise-队列"><a href="#15-Promise-队列" class="headerlink" title="15. Promise 队列"></a>15. Promise 队列</h2><ul><li>原理：通过 then() 方法的调用来实现按队列顺序执行。</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// Promise 是连续的，后面的 Promise 用的是前面 Promise 的then()</span><span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'artoria'</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>使用 map 实现队列</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">queue</span><span class="token punctuation">(</span>funArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> promise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  num<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    promise <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">v</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><ul><li>使用 reduce 实现队列</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">queue</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> curr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token function">curr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">q2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">[</span>q1<span class="token punctuation">,</span> q2<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB简单的crud</title>
      <link href="/2020/07/17/mongodb/"/>
      <url>/2020/07/17/mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="1-MongoDB-的启动"><a href="#1-MongoDB-的启动" class="headerlink" title="1.MongoDB 的启动"></a>1.MongoDB 的启动</h2><p>在 cmd 控制台 MongoDB 所在的盘符下输入</p><pre class=" language-shell"><code class="language-shell"># 所在盘符下需要有 /data/db 文件夹才能启动成功mongod</code></pre><h2 id="2-MongoDB-的连接和退出"><a href="#2-MongoDB-的连接和退出" class="headerlink" title="2.MongoDB 的连接和退出"></a>2.MongoDB 的连接和退出</h2><p>在保持 MongoDB 的启动的同时，新建一个 cmd 控制台，直接输入</p><pre class=" language-shell"><code class="language-shell">mongo</code></pre><p>退出：</p><pre class=" language-shell"><code class="language-shell">exit</code></pre><h2 id="3-基本命令"><a href="#3-基本命令" class="headerlink" title="3.基本命令"></a>3.基本命令</h2><ul><li><p><code>show dbs</code> 查看显示所有数据库</p></li><li><p><code>db</code> 查看当前操作的数据库（默认会有个暂时的 test 数据库）</p></li><li><p><code>use 数据库名称</code> 切换到指定的数据库（如果没有会新建）</p></li><li><p><code>db.students.insertOne()</code> 插入数据</p></li><li><p><code>show collections</code> 显示当前数据库中的所有集合</p></li><li><p><code>db.students.find()</code> 显示集合中的数据</p></li></ul><h2 id="4-在-Node-中如何操作-MongoDB-数据"><a href="#4-在-Node-中如何操作-MongoDB-数据" class="headerlink" title="4.在 Node 中如何操作 MongoDB 数据"></a>4.在 Node 中如何操作 MongoDB 数据</h2><h3 id="4-1-使用第三方-mongoose-操作"><a href="#4-1-使用第三方-mongoose-操作" class="headerlink" title="4.1 使用第三方 mongoose 操作"></a>4.1 使用第三方 mongoose 操作</h3><ul><li>安装</li></ul><pre class=" language-shell"><code class="language-shell">npm i mongoose</code></pre><ul><li>起步小案例</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 导包</span><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 连接数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/test'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建 mongoose 模型</span><span class="token keyword">const</span> Cat <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'Cat'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> String <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 实例化一个 Cat</span><span class="token keyword">const</span> kitty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'Zildjian'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 持久化保存 Kitty 实例</span>kitty<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'meow'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>mongoose 中文网：<code>http://www.mongoosejs.net/</code></li></ul><h3 id="起步："><a href="#起步：" class="headerlink" title="起步："></a>起步：</h3><h3 id="1-设计-Schema"><a href="#1-设计-Schema" class="headerlink" title="1.设计 Schema"></a>1.设计 <code>Schema</code></h3><h3 id="2-发布-Model"><a href="#2-发布-Model" class="headerlink" title="2.发布 Model"></a>2.发布 <code>Model</code></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1、创建表架构</span><span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token comment" spellcheck="true">// 2、连接数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/artoria'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3、设计集合结构</span><span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  username<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    required<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>    required<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  email<span class="token punctuation">:</span> <span class="token punctuation">{</span>    type<span class="token punctuation">:</span> String  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4、将文档结构发布为模型</span><span class="token comment" spellcheck="true">/** *  第一个参数表示数据库的名称 *  mongoose 会自动将大写名称的字符串用来表示数据库名称 *  User => users * *  第二个参数为  架构 Schema */</span><span class="token keyword">var</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span></code></pre><h4 id="4-1-1-新增数据"><a href="#4-1-1-新增数据" class="headerlink" title="4.1.1 新增数据"></a>4.1.1 新增数据</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 5、当我们有了这个模型构造函数后，就可以使用这个构造函数对 users 集合中的数据</span><span class="token comment" spellcheck="true">//     进行操作了</span><span class="token keyword">var</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  username<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>  password<span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  email<span class="token punctuation">:</span> <span class="token string">'admin@admin.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>admin<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存失败'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存成功'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-1-2-查询数据"><a href="#4-1-2-查询数据" class="headerlink" title="4.1.2 查询数据"></a>4.1.2 查询数据</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 查询所有数据</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 按条件查询</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'zs'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-1-3-删除数据"><a href="#4-1-3-删除数据" class="headerlink" title="4.1.3 删除数据"></a>4.1.3 删除数据</h4><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'zs'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="4-1-4-更新数据"><a href="#4-1-4-更新数据" class="headerlink" title="4.1.4 更新数据"></a>4.1.4 更新数据</h4><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">findOneAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token string">'zs'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> password<span class="token punctuation">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  err<span class="token punctuation">,</span>  ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vuejs基础的学习（一）</title>
      <link href="/2020/07/17/vuejs-ji-chu-de-xue-xi-yi/"/>
      <url>/2020/07/17/vuejs-ji-chu-de-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><h2 id="1-1-框架模式"><a href="#1-1-框架模式" class="headerlink" title="1.1 框架模式"></a>1.1 框架模式</h2><ul><li>MVC</li><li>MVP</li><li>MVVM</li></ul><h2 id="1-2-Vue-js-是什么"><a href="#1-2-Vue-js-是什么" class="headerlink" title="1.2 Vue.js 是什么"></a>1.2 Vue.js 是什么</h2><ul><li>Vue.js 不是一个框架，它只是聚焦视图层，是一个构建数据驱动的 Web 界面的库。通过简单的 API 提供了高效的数据绑定和灵活的组件系统。</li><li>Vue.js 的特性<ul><li>确实轻量</li><li>数据绑定</li><li>指令</li><li>插件化</li></ul></li></ul><h2 id="2-1-插值表达式"><a href="#2-1-插值表达式" class="headerlink" title="2.1 插值表达式"></a>2.1 插值表达式</h2><h3 id="2-1-1-插值"><a href="#2-1-1-插值" class="headerlink" title="2.1.1 插值"></a>2.1.1 插值</h3><ul><li>文本插值是最基本的形式，使用双大括号 <code>{ {} }</code> 来实现。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Text: { {text} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><ul><li>标签 <code>{ {text} }</code> 将会被相应的数据对象 text 属性的值替换掉，当 text 的值改变的时候，文本的值也会相应发生改变。</li><li>当只需渲染一次数据，后续数据变化不再关心可以通过 <code>*</code> 来实现</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Text: { {*text} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><ul><li>双大括号标签会把里边的值全部当成字符串来处理，如果是 HTML 片段，则可以使用三个大括号来绑定。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> { {{logo} }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>logo: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>DDEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>'</code></pre><ul><li>双大括号标签还可放在 HTML 标签内。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ {id} }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><h3 id="2-1-2-表达式"><a href="#2-1-2-表达式" class="headerlink" title="2.1.2 表达式"></a>2.1.2 表达式</h3><ul><li>双大括号标签也支持表达式形式的值，表达式可以由 JavaScript 表达式和过滤器构成。</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- JS 表达式 --></span>{ { cents/100 } } { { true? 1 : 0 } } { { example.split(",") } }<span class="token comment" spellcheck="true">&lt;!-- 过滤器 --></span>{ { example | toUpperCase } } { {example | filterA | filterB} }</code></pre><h2 id="2-2-分隔符"><a href="#2-2-分隔符" class="headerlink" title="2.2 分隔符"></a>2.2 分隔符</h2><p>通过配置目录文件<code>src/config.js</code>中的 <code>vue.config.delimiters</code> 来修改默认的文本插值的分隔符</p><h2 id="3-1-指令"><a href="#3-1-指令" class="headerlink" title="3.1 指令"></a>3.1 指令</h2><ul><li>指令是特殊的带有前缀 v- 的特性。</li><li>指令的值限定为绑定表达式。</li><li>指令的功能就是当前表达式改变时把某些特殊的行为应用到 DOM 上。</li></ul><h2 id="3-2-内部指令"><a href="#3-2-内部指令" class="headerlink" title="3.2 内部指令"></a>3.2 内部指令</h2><h3 id="3-2-1-v-if"><a href="#3-2-1-v-if" class="headerlink" title="3.2.1 v-if"></a>3.2.1 v-if</h3><ul><li>v-if 指令可以完全根据表达式的值在 DOM 中生成或移除一个元素。</li><li>如果 v-if 表达式赋值为 false，那么对应的元素就会从 DOM 中移除。</li><li>如果 v-if 表达式赋值为 true，那么对应的元素的一个克隆将被重新插入 DOM 中。</li><li>下例代码中的 p 元素即从 DOM 中移除。</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 切换单个元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> exampleVM2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      greeting<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 切换多个元素，可以用 template 标签包装元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>paragraph1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>paragraph2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-2-v-show"><a href="#3-2-2-v-show" class="headerlink" title="3.2.2 v-show"></a>3.2.2 v-show</h3><ul><li>根据表达式的值来显示或隐藏 HTML 元素</li><li>当 v-show 赋值为 false 时，元素将被隐藏。查看 DOM 时，元素上多了一个内联样式 <code>style=&quot;display:none&quot;</code>。</li><li>下例代码的 p 元素被隐藏,其样式为 <code>display:none</code>。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>var vm = new Vue({ el: '#app', data: { message: '', greeting: false, } })</code></pre><ul><li>v-show 不支持 &lt; template &gt; 语法</li><li>v-if 是个真实的条件渲染，它是惰性的——如果初始渲染的条件是 false，则什么也不做，在条件第一次变为 true 时才会开始局部编译（编译会被缓存）；v-show 元素始终被编译并保留，只是简单地基于 CSS 切换。</li><li>一般来说，v-if 有更高的切换消耗，而 v-show 有更高的渲染消耗。因此当需要频繁地切换，使用 v-show 更好；在运行时条件不大可能改变，使用 v-if 更好。</li></ul><h3 id="3-2-3-v-else"><a href="#3-2-3-v-else" class="headerlink" title="3.2.3 v-else"></a>3.2.3 v-else</h3><ul><li>v-else 就是 JavaScript 中 else 的意思，它必须跟着 v-if 或者 v-show，从当 else 功能。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是对的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>我是错的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      ok<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 当我们使用 v-show的时候，可使用另一个 v-show 来替换 v-else --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是对的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是错的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-4-v-model"><a href="#3-2-4-v-model" class="headerlink" title="3.2.4 v-model"></a>3.2.4 v-model</h3><ul><li>v-model 指令用来在 input、select、text、CheckBox、radio 等表单控件上创建双向数据绑定。</li><li>根据控件类型 v-model 自动选取正确的方法更新元素。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    姓名：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    性别：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Two<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    兴趣：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>阅读<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swim<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swim<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swim<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游泳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    身份：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.identity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>worker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>工人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doctor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>医生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        sex<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        interests<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        identity<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>除了上述用法，在 v-model 指令后还能添加多个参数<ul><li>number：将用户的输入自动转换为 Number 类型（如果原值的转换结果为 NaN，则返回原值）</li><li>lazy：将数据改到在 change 事件中发生（当 input 输入框失去焦点的时候 msg 的值才发生变化）。</li><li>debounce：设置一个最小延时，在每次敲击后延时同步输入框的值与数据。(已经废弃，需要的话使用 lodash 的 debounce 方法来消抖)，参考<code>https://segmentfault.com/a/1190000015312430</code> 网址</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- lazy 参数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'内容是在 change 事件后才改变的'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-5-v-for"><a href="#3-2-5-v-for" class="headerlink" title="3.2.5 v-for"></a>3.2.5 v-for</h3><ul><li>我们可以使用 v-for 指令基于原数据重复渲染元素。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      { {index} } -{ {item.parentMessage} } { {item.msg} }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      items<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> parentMessage<span class="token punctuation">:</span> <span class="token string">'滴滴'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'滴滴顺风车'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'滴滴专车'</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>key 的作用：帮助 Vue 区分不同的元素，从而提高性能。</li></ul><h3 id="3-2-6-v-text"><a href="#3-2-6-v-text" class="headerlink" title="3.2.6 v-text"></a>3.2.6 v-text</h3><ul><li>v-text 指令可以更新元素的 textContent。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- same as --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{ {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-7-v-html"><a href="#3-2-7-v-html" class="headerlink" title="3.2.7 v-html"></a>3.2.7 v-html</h3><ul><li>v-html 指令可以更新元素的 innerHTML，不建议直接在网站上动态渲染任意 HTML 片段，容易导致 XSS 攻击。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- same as --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {{html} }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-8-v-bind"><a href="#3-2-8-v-bind" class="headerlink" title="3.2.8 v-bind"></a>3.2.8 v-bind</h3><ul><li>v-bind 指令用于响应更新 HTML 特性，将一个或多个 attribute，或者一个组件 prop 动态绑定到表达式</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定 attribute --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[classA,{classB:isB,classC:isC}]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      classA<span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>      isB<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      isC<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-9-v-on"><a href="#3-2-9-v-on" class="headerlink" title="3.2.9 v-on"></a>3.2.9 v-on</h3><ul><li>v-on 指令用于绑定事件监听器。</li><li>使用在普通元素上，只能监听原生 DOM 事件；使用在自定义元素组件上，可以监听子组件触发的自定义事件</li><li>如果在内联语句处理器中访问原生 DOM 事件，则可以用特殊变量 $event 把它传入方法。</li><li>v-on 后面不仅可以跟参数，还可以增加修饰符<ul><li>.stop：停止冒泡</li><li>.prevent：停止默认行为</li><li>.self：只当事件是从侦听器绑定的元素本身触发时才出发回调</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 方法处理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 内联语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat(<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>,$event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件修饰符 --></span><span class="token comment" spellcheck="true">&lt;!-- 停止冒泡 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 串联修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.13</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 自定义按键修饰符 全局config.keyCodes 对象 --></span>Vue.config.keyCodes.aaa = 65</code></pre><ul><li><p>事件绑定 – 参数传递</p><ul><li>如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数。</li><li>如果事件绑定函数调用（内联语句的形式），那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是 $event</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  &lt;button v-on:click="handle2(123,"hello",$event)">点击2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      handle1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 点击1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      handle2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 123 "hello" 点击二</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="3-2-10-v-ref"><a href="#3-2-10-v-ref" class="headerlink" title="3.2.10 v-ref"></a>3.2.10 v-ref</h3><ul><li>在父组件上注册一个子组件的索引，便于直接访问。</li><li>不需要表达式，必须提供参数 id</li><li>可以通过父组件的 $refs 对象访问子组件</li></ul><h3 id="3-2-11-v-slot"><a href="#3-2-11-v-slot" class="headerlink" title="3.2.11 v-slot"></a>3.2.11 v-slot</h3><ul><li>提供具名插槽或需要接收 prop 的插槽</li></ul><h3 id="3-2-12-v-pre"><a href="#3-2-12-v-pre" class="headerlink" title="3.2.12 v-pre"></a>3.2.12 v-pre</h3><ul><li>编译时跳过当前元素和其子元素。</li><li>用来显示原始的标签</li></ul><h3 id="3-2-13-v-cloak"><a href="#3-2-13-v-cloak" class="headerlink" title="3.2.13 v-cloak"></a>3.2.13 v-cloak</h3><ul><li>和 CSS 规则如 <code>[v-cloak]{display:none}</code> 一起使用时，这个指令可以隐藏未编译的 双大括号标签直到实例准备完毕。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token attribute">[v-cloak]</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>    { {msg} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-14-v-once"><a href="#3-2-14-v-once" class="headerlink" title="3.2.14 v-once"></a>3.2.14 v-once</h3><ul><li><p>只编译一次，显示后的内容不再具有响应式功能。</p></li><li><p>元素/组件及其所有的子节点都将被视为静态资源内容并跳过</p></li><li><p>目的是为了节省性能。</p></li></ul><h2 id="4-1-自定义属性"><a href="#4-1-自定义属性" class="headerlink" title="4.1 自定义属性"></a>4.1 自定义属性</h2><h4 id="4-1-1-为何需要自定义指令"><a href="#4-1-1-为何需要自定义指令" class="headerlink" title="4.1.1 为何需要自定义指令"></a>4.1.1 为何需要自定义指令</h4><p>​ 内置指令不满足需求</p><h4 id="4-1-2-自定义指令的语法规则"><a href="#4-1-2-自定义指令的语法规则" class="headerlink" title="4.1.2 自定义指令的语法规则"></a>4.1.2 自定义指令的语法规则</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// el 表示指令所绑定的元素</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-1-3-带参数的自定义指令"><a href="#4-1-3-带参数的自定义指令" class="headerlink" title="4.1.3 带参数的自定义指令"></a>4.1.3 带参数的自定义指令</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// el 表示指令所绑定的元素</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> orange      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-1-4-局部指令"><a href="#4-1-4-局部指令" class="headerlink" title="4.1.4 局部指令"></a>4.1.4 局部指令</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 局部指令只能在本组件使用</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> <span class="token punctuation">{</span>      bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>      inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="5-1-计算属性"><a href="#5-1-计算属性" class="headerlink" title="5.1 计算属性"></a>5.1 计算属性</h2><h4 id="5-1-1-为何需要计算属性"><a href="#5-1-1-为何需要计算属性" class="headerlink" title="5.1.1 为何需要计算属性"></a>5.1.1 为何需要计算属性</h4><p>​ 表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁</p><h4 id="5-1-2-计算属性的语法规则"><a href="#5-1-2-计算属性的语法规则" class="headerlink" title="5.1.2 计算属性的语法规则"></a>5.1.2 计算属性的语法规则</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {reverseString} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'nihao'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 计算属性基于 data 中的值来处理</span>      reverseString<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="5-1-3-计算属性和方法的区别"><a href="#5-1-3-计算属性和方法的区别" class="headerlink" title="5.1.3 计算属性和方法的区别"></a>5.1.3 计算属性和方法的区别</h4><ul><li>计算属性是基于它们的依赖进行缓存的</li><li>方法不存在缓存</li></ul><h2 id="6-1-过滤器"><a href="#6-1-过滤器" class="headerlink" title="6.1 过滤器"></a>6.1 过滤器</h2><h4 id="6-1-1-过滤器的作用"><a href="#6-1-1-过滤器的作用" class="headerlink" title="6.1.1 过滤器的作用"></a>6.1.1 过滤器的作用</h4><p>​ 格式化数据，比如将字符串格式化为首字母大写，将日期格式化为指定格式等。</p><h4 id="6-1-2-自定义过滤器"><a href="#6-1-2-自定义过滤器" class="headerlink" title="6.1.2 自定义过滤器"></a>6.1.2 自定义过滤器</h4><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="6-1-3-过滤器的使用"><a href="#6-1-3-过滤器的使用" class="headerlink" title="6.1.3 过滤器的使用"></a>6.1.3 过滤器的使用</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg | upper} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg | upper | lower} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id | formatId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="6-1-4-局部过滤器"><a href="#6-1-4-局部过滤器" class="headerlink" title="6.1.4 局部过滤器"></a>6.1.4 局部过滤器</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'nihao'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 只能在本组件中使用</span>    filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>      upper<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="6-1-5-带参数的过滤器"><a href="#6-1-5-带参数的过滤器" class="headerlink" title="6.1.5 带参数的过滤器"></a>6.1.5 带参数的过滤器</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {date | format("yyyy-MM-dd")} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'format'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> nowDate          <span class="token keyword">return</span> nowDate <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      date<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="7-1-侦听器"><a href="#7-1-侦听器" class="headerlink" title="7.1 侦听器"></a>7.1 侦听器</h2><h4 id="7-1-1-侦听器的触发条件和应用场景"><a href="#7-1-1-侦听器的触发条件和应用场景" class="headerlink" title="7.1.1 侦听器的触发条件和应用场景"></a>7.1.1 侦听器的触发条件和应用场景</h4><ul><li>数据一旦变化就会通知侦听器所绑定方法</li><li>当数据变化时执行异步操作或开销较大的操作用侦听器</li></ul><h4 id="7-1-2-侦听器的语法规则"><a href="#7-1-2-侦听器的语法规则" class="headerlink" title="7.1.2 侦听器的语法规则"></a>7.1.2 侦听器的语法规则</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>    用户：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{ {tip} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      tip<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      checkName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>uname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            that<span class="token punctuation">.</span>tip <span class="token operator">=</span> <span class="token string">'用户已存在，请更改用户名'</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            that<span class="token punctuation">.</span>tip <span class="token operator">=</span> <span class="token string">'可以使用当前用户名'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkName</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tip <span class="token operator">=</span> <span class="token string">'正在验证...'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="8-1-生命周期"><a href="#8-1-生命周期" class="headerlink" title="8.1 生命周期"></a>8.1 生命周期</h2><h3 id="8-1-1-主要阶段"><a href="#8-1-1-主要阶段" class="headerlink" title="8.1.1 主要阶段"></a>8.1.1 主要阶段</h3><ul><li>挂载（初始化相关属性）<ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li></ul></li><li>更新（元素或组件的变更操作）<ul><li>beforeUpdate</li><li>updated</li></ul></li><li>销毁（销毁相关属性）<ul><li>beforeDestroy</li><li>destroyed</li></ul></li></ul><h2 id="9-1-表单操作"><a href="#9-1-表单操作" class="headerlink" title="9.1 表单操作"></a>9.1 表单操作</h2><h3 id="9-1-1-文本框"><a href="#9-1-1-文本框" class="headerlink" title="9.1.1 文本框"></a>9.1.1 文本框</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>var vm = new Vue({ data:{ uname:'' } })</code></pre><h3 id="9-1-2-单选框"><a href="#9-1-2-单选框" class="headerlink" title="9.1.2 单选框"></a>9.1.2 单选框</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ gender:1 } })</code></pre><h3 id="9-1-3-复选框"><a href="#9-1-3-复选框" class="headerlink" title="9.1.3 复选框"></a>9.1.3 复选框</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>敲代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ hobby:["2","3"] } })</code></pre><pre><code>    ###     9.1.4 下拉菜单</code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 单选 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择职业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>工人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>医生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 多选 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jobs<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择职业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>工人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>医生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ job:3, jobs:["2","3"] } })</code></pre><h3 id="9-1-5-文本域"><a href="#9-1-5-文本域" class="headerlink" title="9.1.5 文本域"></a>9.1.5 文本域</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ desc:"nihao" } })</code></pre><pre><code>### 9.1.6 表单域修饰符</code></pre><ul><li>number：转化为数值</li><li>trim：去掉开头和结尾的空格</li><li>lazy：将 input 事件转换为 change 事件</li></ul><h2 id="10-1-数组更新检测"><a href="#10-1-数组更新检测" class="headerlink" title="10.1 数组更新检测"></a>10.1 数组更新检测</h2><h3 id="10-1-1-变更方法"><a href="#10-1-1-变更方法" class="headerlink" title="10.1.1 变更方法"></a>10.1.1 变更方法</h3><p>​ 变更方法会变更调用了这些方法的原始数组，Vue 将被侦听的数组进行了包裹，所以它们也将会触发视图更新，这些被包裹的方法有：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h3 id="10-1-2-替换数组"><a href="#10-1-2-替换数组" class="headerlink" title="10.1.2 替换数组"></a>10.1.2 替换数组</h3><p>​ 它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组，这些方法有：</p><ul><li>filter()</li><li>concat()</li><li>slice()</li></ul><h3 id="10-1-3-修改响应式数据"><a href="#10-1-3-修改响应式数据" class="headerlink" title="10.1.3 修改响应式数据"></a>10.1.3 修改响应式数据</h3><ul><li>Vue.set(vm.items, indexOfItem, newValue)</li><li>vm.$set(vm.items, indexOfItem, newValue)<ul><li>第一个参数表示要处理的数组名称</li><li>第二个参数表示要处理的数组的索引</li><li>第三个参数表示要处理的数组的值</li></ul></li></ul><h2 id="11-1-案例"><a href="#11-1-案例" class="headerlink" title="11.1 案例"></a>11.1 案例</h2><pre><code>D:\Learn\learnVuejs\demo2</code></pre><ul><li>图书列表<ul><li>实现静态列表效果</li><li>基于数据实现模板效果</li><li>处理每行的操作按钮（阻止 a 标签的默认行为）</li></ul></li><li>添加图书<ul><li>实现表单的静态效果</li><li>添加图书表单域数据绑定</li><li>添加按钮事件绑定</li><li>实现添加业务逻辑</li></ul></li><li>修改图书<ul><li>修改信息填充到表单</li><li>修改后重新填充表单</li><li>重用添加和修改的方法</li></ul></li><li>删除图书<ul><li>删除按钮绑定事件处理方法</li><li>实现删除的事件逻辑</li></ul></li><li>常用特性应用场景<ul><li>过滤器（格式化日期）</li><li>自定义指令（自动获取焦点）</li><li>计算属性（统计图书总数）</li><li>侦听器（验证图书的存在性）</li><li>生命周期（图片数据处理）</li></ul></li></ul><h2 id="12-1-组件注册"><a href="#12-1-组件注册" class="headerlink" title="12.1 组件注册"></a>12.1 组件注册</h2><pre><code>### 12.1.1 全局组件注册</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--驼峰式命名的组件，在使用的时候只能在标签模板中必须使用短横线的方式--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 可以使用驼峰式命名法和短横线命名 buttonCounter</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// data 必须是一个函数</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 组件模板必须只有一个根元素</span>    <span class="token comment" spellcheck="true">// 组件模板内容可以是模板字符串</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;button @click="handle">点击了{ {count} }次&lt;/button>`</span></span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="12-1-2-局部组件注册"><a href="#12-1-2-局部组件注册" class="headerlink" title="12.1.2 局部组件注册"></a>12.1.2 局部组件注册</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-world</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>{ {msg} }&lt;/div>`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'hello-world'</span><span class="token punctuation">:</span> HelloWorld    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="13-1-组件间数据交互"><a href="#13-1-组件间数据交互" class="headerlink" title="13.1 组件间数据交互"></a>13.1 组件间数据交互</h2><h3 id="13-1-1-父组件向子组件传值"><a href="#13-1-1-父组件向子组件传值" class="headerlink" title="13.1.1 父组件向子组件传值"></a>13.1.1 父组件向子组件传值</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 父组件通过属性来将值传递给子组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 组件内部通过 props 接收传递过来的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'menu-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{ {title} }&lt;/div>'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'来自父组件的值'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>【注意点】：</p><ul><li><p>DOM 元素不区分大小写，所以在 props 中使用驼峰形式，模板中需要使用短横线的形式，但在字符串模板( template )中没这个限制。</p></li><li><p>props 属性值类型：</p><ul><li>字符串 String</li><li>数值 Number</li><li>布尔值 Boolean</li><li>数组 Array</li><li>对象 Object</li></ul><p>其中对于 数值 Number 和 布尔值 Boolean，在父组件中通过 v-bind 动态绑定数据，子组件获取得数据的数值类型为 Number 或 Boolean，否则都为 String。</p></li></ul><h3 id="13-1-2-子组件向父组件传值"><a href="#13-1-2-子组件向父组件传值" class="headerlink" title="13.1.2 子组件向父组件传值"></a>13.1.2 子组件向父组件传值</h3><ul><li>子组件通过自定义事件向父组件传递信息</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>$emit(<span class="token punctuation">"</span>enlarge-text<span class="token punctuation">"</span>,5)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>扩大字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><ul><li>父组件监听子组件的事件</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name"><span class="token namespace">v-on:</span>enlagre-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fontSize +<span class="token punctuation">=</span> $event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span></code></pre><p>【注意点】：props 是单向数据流，我们不应该通过 props 来从子组件向父组件传值。</p><h3 id="13-1-3-兄弟组件间传值"><a href="#13-1-3-兄弟组件间传值" class="headerlink" title="13.1.3 兄弟组件间传值"></a>13.1.3 兄弟组件间传值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 单独的事件中心管理组件间的通信</span><span class="token keyword">var</span> eventHub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听事件</span>eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件</span>eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 销毁事件</span>eventHub<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">)</span></code></pre><h2 id="14-1-组件插槽"><a href="#14-1-组件插槽" class="headerlink" title="14.1 组件插槽"></a>14.1 组件插槽</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span>有个错误<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span> // ERROR:有个错误  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span>有个警告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span> // ERROR:有个警告 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span> //  ERROR:默认内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'alert-box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`            &lt;div>              &lt;strong>ERROR:&lt;/strong>                &lt;slot>默认内容&lt;/slot>          &lt;/div>        `</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="14-1-1-插槽作用域"><a href="#14-1-1-插槽作用域" class="headerlink" title="14.1.1 插槽作用域"></a>14.1.1 插槽作用域</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 父级插槽可以访问相同实例 property 作用域，即vm实例的data值，但不能访问 test-one 组件的作用域 --></span><span class="token comment" spellcheck="true">&lt;!-- 插槽内容是传递给 test-one 的，而不是在 test-one 组件内部定义的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-one</span><span class="token punctuation">></span></span>    Logged in as { { user.name } }    <span class="token comment" spellcheck="true">&lt;!-- 显示结果为 saber --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'test-one'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`     &lt;a href="http://www.baidu.com">       &lt;slot>&lt;/slot>     &lt;/a>      `</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'artoria'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'saber'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="14-1-2-具名插槽"><a href="#14-1-2-具名插槽" class="headerlink" title="14.1.2 具名插槽"></a>14.1.2 具名插槽</h3><p>​ 有时我们需要多个插槽。如下例 <base-layout> 组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 我们希望把页头放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 我们希望把主要内容放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 我们希望把页脚放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>​ 我们可以通过 <slot> 元素的 name 属性来具体名称的插槽</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>​ 在向具名插槽提供内容的时候，我们需要在 &lt; template &gt; 元素上使用 <code>v-slot</code> 指令。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  &lt; template >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here's some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">></span></span></code></pre><p>​ 【注意点】：<code>v-slot</code> 只能添加在 &lt; template &gt; 上。</p><h3 id="14-1-3-作用域插槽"><a href="#14-1-3-作用域插槽" class="headerlink" title="14.1.3 作用域插槽"></a>14.1.3 作用域插槽</h3><p>​ 有时我们需要让插槽的内容能够访问子组件中的数据。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 这里的插槽内容只能获取本实例即 vm 的 data 数据，而获取不到子组件的数据 --></span>  { {user.firstName} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'current-user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>          firstName<span class="token punctuation">:</span> <span class="token string">'Artoria'</span><span class="token punctuation">,</span>          lastName<span class="token punctuation">:</span> <span class="token string">'Pendragon'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;span>          &lt;slot>            { {user.lastName} }          &lt;/slot>          &lt;/span>      `</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>​ 我们可以通过作用域插槽来解决这个问题。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 在子组件的模板中 --></span><span class="token comment" spellcheck="true">&lt;!-- 绑定在 &lt;slot> 元素上的 attribute 被称为 插槽 prop --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {user.lastName} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 在父级作用域中，我们可以使用带值的 v-slot 来定义我们提供的插槽的名字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {slotProps.user.firstName} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">></span></span></code></pre><p>【注意点】：</p><ul><li>当被提供的内容只有默认插槽的时候，组件的标签可以被当成模板来使用，这时我们可以把 v-slot 直接用在组件上。</li><li>默认插槽的缩写语法不能和具名插槽混用，会导致作用域不明确</li><li>可以使用 解构解析 来传入具体的 插槽 prop，如上例：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ { user } }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {user.firstName} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的实现（一）</title>
      <link href="/2020/07/17/shu-ju-jie-gou-yu-suan-fa-yi/"/>
      <url>/2020/07/17/shu-ju-jie-gou-yu-suan-fa-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h2 id="1-What"><a href="#1-What" class="headerlink" title="1.What"></a>1.What</h2><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h2><ul><li>数组是一种 <code>线性结构</code></li><li>数组的优点：<ul><li>通过下标查找数据十分方便。</li></ul></li><li>数组的缺点：<ul><li>创建需要申请一段连续的内存空间，大小是固定的，可能会需要扩容（耗时耗力）</li><li>添加和删除元素的效率低，可能会需要进行大量的元素的</li></ul></li></ul><h2 id="3-栈"><a href="#3-栈" class="headerlink" title="3. 栈"></a>3. 栈</h2><ul><li>栈是一种受限的线性结构，只能从表的一端添加或删除元素。这一端称为<code>栈顶</code> ，另一端称为栈底。</li><li>栈的特点是后进先出（LIFO）</li><li>函数调用栈<ul><li>A 调用 B，B 中又调用 C，C 中又调用 D</li><li>在执行过程中，会先将 A 压入栈，A 没有执行完，所以不会出栈</li><li>在 A 的执行过程中调用了 B ，所以 B 压入栈，这时 B 在栈顶，A 在栈底</li><li>B 调用了 C ，所以 C 会压栈，并且在栈顶，而 C 调用了 D，D 会压入栈顶</li><li>当前栈的顺序是 A –&gt; B –&gt; C –&gt; D</li><li>出栈的顺序为 D –&gt; C –&gt; B –&gt; A</li></ul></li><li>递归调用没有跳出条件的时候会造成 <code>栈溢出</code> 的现象。</li><li>栈的实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通过 类 来实现 栈</span><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过 数组 来实现 栈中数据的存放</span>  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 栈的相关操作</span>  <span class="token comment" spellcheck="true">// 1. 将元素压入栈</span>  <span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 从栈中取出元素</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 3. 查看一下栈顶元素</span>  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 4. 判断栈是否为空</span>  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 5.获取栈中元素的个数</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 6. toString 方法</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>对栈的使用： 实现 NumberObject.toString(2) 十进制转二进制</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>decNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// decNumber 为 0 时退出循环</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在栈中存储 十进制 模二 的余数</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 decNumber 除二 赋予自身</span>    decNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> binNumber <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true">// s 中还有数据都赋值给 binNumber</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字符串拼接</span>    binNumber <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> binNumber <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="4-队列"><a href="#4-队列" class="headerlink" title="4. 队列"></a>4. 队列</h2><ul><li><p>队列也是一种受限的线性结构，只允许在表的 <code>前端</code> 进行删除操作，表的 <code>后端</code> 进行插入操作</p></li><li><p>队列的特点是先进先出（FIFO）</p></li><li><p>队列的应用：</p><ul><li>打印队列：优先放入的文档，优先被取出。</li><li>线程队列：线程队列会依照次序来实现线程。</li></ul></li><li><p>队列的实现：</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过 数组 来实现 队列中数据的存放</span>  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 队列中的相关操作</span>  <span class="token comment" spellcheck="true">// 1. 实现 队列 的添加操作</span>  <span class="token function">enqueue</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 实现 队列 的删除操作</span>  <span class="token function">delqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 3. 查看 队列的 最前面的元素</span>  <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 4. 判断 队列 是否为空</span>  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 5. 队列的 大小</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 6. 重写 toString 方法</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return this.items.join(' ')</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>击鼓传花的实现<ul><li>规则：几个朋友一起玩一个游戏，围成一圈，开始数数，数到某个数字的人自动淘汰。最后剩下的这个人会获得胜利，请问最后剩下的是原来在哪一个位置的人。</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">passGame</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1. 将 玩家存入 队列</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nameList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 3. 直到 队列 的长度 等于 1 停止操作</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.1 小于 num 的数 取出后存入 尾部</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">delqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.2 等于 num 的数 直接删除</span>    q<span class="token punctuation">.</span><span class="token function">delqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> endName <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最终的人是：'</span> <span class="token operator">+</span> endName<span class="token punctuation">)</span>  <span class="token keyword">return</span> nameList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>endName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'artoria'</span><span class="token punctuation">,</span> <span class="token string">'noa'</span><span class="token punctuation">,</span> <span class="token string">'sora'</span><span class="token punctuation">,</span> <span class="token string">'tsubaki'</span><span class="token punctuation">,</span> <span class="token string">'saber'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">passGame</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-1-优先级队列"><a href="#4-1-优先级队列" class="headerlink" title="4.1 优先级队列"></a>4.1 优先级队列</h3><ul><li>优先级队列的特点：在插入每一个元素的时候回考虑数据的优先级，和其他数据优先级进行比较，在比较完成后，可以得出这个元素只在队列中正确的位置。</li><li>需要考虑的问题：每个元素不再只是一个数据，而且包含数据的优先级。</li><li>生活中的应用：机场登机顺序，急诊科的处理，通过优先级队列重新排序队列中的顺序</li><li>优先级队列的实现：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">priorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义 一个数组 接收 数据对象</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 定义 一个数据对象类</span>  <span class="token keyword">function</span> <span class="token function">queueElement</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 队列 插入数据的功能</span>  priorityQueue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>enqueue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newElem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">queueElement</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> priority<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数组中没有数据 直接存放</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newElem<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断插入的数 是否 都大于 数组中的数，表示是否 已插入</span>      <span class="token keyword">var</span> isAdded <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority <span class="token operator">></span> newElem<span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 插入</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElem<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 说明 已插入</span>          isAdded <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token keyword">break</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 插入的数 大于 所有 数组中的数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 直接插入</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newElem<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 队列 移除数据的功能</span>  priorityQueue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>dequeue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">priorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'artoria'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'noa'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'tsubaki'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'minami'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span></code></pre><h2 id="5-链表"><a href="#5-链表" class="headerlink" title="5. 链表"></a>5. 链表</h2><ul><li>功能：存储多个元素</li><li>特点：<ul><li>链表中的元素在内存中不必是连续的空间。</li><li>每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（指针）组成</li></ul></li><li>相对于数组的优点：<ul><li>内存空间不是必须连续的，可以实现灵活的内存动态管理</li><li>链表创建的时候不必确定大小，可以无限的延伸下去</li><li>链表在插入和删除数据时，时间复杂度能达到 O(1)，效率高很多。</li></ul></li><li>相对于数组的缺点：<ul><li>访问任何位置的元素都需要从头开始访问</li><li>无法通过下标直接访问元素</li></ul></li><li>什么是链表<ul><li>类似于 <code>火车</code> ，有一个火车头，火车头会连接一个节点，节点上有乘客（类似于数据），并且这个节点会连接下一个节点，一次类推。</li></ul></li></ul><h3 id="5-1-单向链表"><a href="#5-1-单向链表" class="headerlink" title="5.1 单向链表"></a>5.1 单向链表</h3><ul><li><p>只能从头遍历到尾 或 从尾部遍历到头部</p></li><li><p>实现的原理是上一个链表中有一个指向下一个的引用</p></li><li><p>缺点：</p><ul><li>可以轻松的到达下一个节点，但是回到前一个节点是很难的。</li></ul></li><li><p>单向链表的实现</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 内部类 存储数据的类</span>  <span class="token keyword">function</span> <span class="token function">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 内部属性</span>  <span class="token comment" spellcheck="true">// 默认 head 指向 null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 实现 添加方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>append <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 创建 数据类</span>    <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 判断添加的 是否是 第一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newNode    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.1获取 当前第一个节点</span>      <span class="token keyword">var</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head      <span class="token comment" spellcheck="true">// 2.2 获取 最后一个节点</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 2.3 在当前最后一节节点 追加</span>      currentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 toString 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> resultStr <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      resultStr <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">' '</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultStr  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 插入方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建 数据类</span>    <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 当前 读取到的 数据类</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 当前 未插入前的 第一个数据类</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token comment" spellcheck="true">// 1. 判断 position 是否越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 2. 在 表头 插入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第一个 数据类</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newNode      <span class="token comment" spellcheck="true">// 插入的 数据类 的 next 指向原来的 第一个数据类</span>      newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> current    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token comment" spellcheck="true">// 3. 在 表中 插入</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> current        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode      newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> current    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4.长度加一</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 get 获取数据 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>data  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 indexOf 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>indexOf <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        index<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 update 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> newData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    current<span class="token punctuation">.</span>data <span class="token operator">=</span> newData    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 removeAt 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>removeAt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> current        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>data  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 remove 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 isEmpty 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 size 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-双向链表"><a href="#5-2-双向链表" class="headerlink" title="5.2 双向链表"></a>5.2 双向链表</h3><ul><li>既可以从头遍历到尾，也可以从尾遍历到头</li><li>实现原理：一个节点即有向前连接的引用，向后连接的引用</li><li>缺点：<ul><li>插入或删除需要处理 四个引用</li><li>相比于单向链表，占用内存空间更大</li></ul></li></ul><blockquote><p>瑕不掩瑜，这些缺点对于操作的方便性是微不足道的。</p></blockquote><ul><li>双向链表的实现：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">DoulyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义 内部类 封装数据</span>  <span class="token keyword">function</span> <span class="token function">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 内部属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// append 尾部追加方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>append <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newElem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断 双向链表 是否为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newElem      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newElem      newElem<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 长度加一</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// forwardString 正向遍历</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forwardString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">' '</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// backwardString 倒向遍历</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>backwardString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">' '</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>prev    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// toString 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forwardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// insert 插入方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建数据类</span>    <span class="token keyword">var</span> newElem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1. 越界判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 2. 插入的实现</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.1 链表内没有数据直接插入</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newElem      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.2 插入第一个位置</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> newElem        newElem<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newElem      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.3 插入最后一个位置</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newElem        newElem<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.4 插入中间的位置</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newElem        newElem<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        newElem<span class="token punctuation">.</span>next <span class="token operator">=</span> current        current<span class="token punctuation">.</span>prev <span class="token operator">=</span> newElem      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 长度加一</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// get 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token comment" spellcheck="true">// 1. 判断 position 在链表的位置</span>    <span class="token comment" spellcheck="true">// 1.1 在链表的前半部分，用正向查询</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">>=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      <span class="token keyword">return</span> current<span class="token punctuation">.</span>data    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1.2 在链表的后半部分，用反向查询</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>prev      <span class="token punctuation">}</span>      <span class="token keyword">return</span> current<span class="token punctuation">.</span>data    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// indexOf 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>indexOf <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        index<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// update 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 判断 position 的位置 在链表中的位置 来决定正向 反向查询</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    current<span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// removeAt 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>removeAt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 1.1 移除 头部第一个数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1.2 当链表只有一个数据</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.3 当链表有多个数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.1 移除 尾部的第一个数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev      <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 3. 移除 中间的数据</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token comment" spellcheck="true">// 3.1 判断 删除的元素位置 在链表 的对应位置</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">>=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// remove 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// isEmpty 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// size 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-集合"><a href="#6-集合" class="headerlink" title="6. 集合"></a>6. 集合</h2><ul><li>特点：无序，不能重复的元素构成</li><li>ES6 封装的 <code>Set</code> 类 即是 集合类</li><li>集合类的实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">mySet</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 创建 一个对象 来接收 数据</span>  items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 add 方法 向集合添加一个新的项</span>  <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 判断是否存在这个值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> value      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 remove 方法 从集合移除一个值</span>  <span class="token function">remove</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>value<span class="token punctuation">]</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 has 方法 判断值是否在集合中 返回值为 布尔</span>  <span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 clear 方法 移除集合中所有项</span>  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 size 方法</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 values 方法 返回一个包含集合所有值的数组</span>  <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>集合间操作</p><ul><li>并集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 求并集 的函数实现</span>  <span class="token function">union</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> unionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> unionSet  <span class="token punctuation">}</span></code></pre></li></ul><ul><li>差集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 求交集 的函数实现</span>  <span class="token function">intersection</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> intersectionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        intersectionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> intersection  <span class="token punctuation">}</span></code></pre><ul><li>交集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 求差集 的函数实现</span>  <span class="token function">Subtraction</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> SubtractionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SubtractionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> SubtractionSet  <span class="token punctuation">}</span></code></pre><ul><li>子集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 判断是否是 子集 的函数实现</span>  <span class="token function">subset</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><h2 id="7-字典"><a href="#7-字典" class="headerlink" title="7. 字典"></a>7. 字典</h2><ul><li>特点：<ul><li>存储的是键值对</li><li>一个键对应一个值</li><li>键是不允许重复的</li></ul></li><li>在 JavaScript 中 字典和对象之间基本可以相互替代</li><li>在很多编程语言（如 java）中，对象通常实在编译期就确定下来的结构，不可以动态的添加或删除，字典通常会使用类似 <code>哈希表</code> 的数据结构去实现一种动态的添加数据的结构</li></ul><h2 id="8-哈希表"><a href="#8-哈希表" class="headerlink" title="8. 哈希表"></a>8. 哈希表</h2><ul><li>哈希表是一种根据 键值对而直接访问的数据结构</li><li>给定表 M，存在函数 f(key)，对任意给定的关键字值 key，代入函数后或能得到包含该关键字的记录在表中的地址，则称表 M 为哈希表，函数为哈希函数</li><li>哈希表的优点：<ul><li>提供非常快速的 插入-删除-查找 操作</li><li>无论多少数据，插入语和删除值需要非常接近常量的时间，即 O(1) 的时间级</li><li>查找速度比数还要快，基本可以瞬间找到想要的元素。</li></ul></li><li>哈希表的缺点：<ul><li>哈希表中的数据是没有顺序的，所以不能以一种固定的方式（比如从小到大）来遍历其中的额元素。</li><li>一般而言，哈希表中的 key 是不允许重复的，不能放置相同的 key 保存不同的元素。</li></ul></li></ul><h3 id="8-1-冲突"><a href="#8-1-冲突" class="headerlink" title="8.1 冲突"></a>8.1 冲突</h3><ul><li>通过哈希函数得到一个数所在位置已经被其他数存储了，这种现象称为 冲突。</li><li>解决方案：<ul><li><code>链地址法</code></li><li><code>开放地址法</code></li></ul></li></ul><h3 id="8-2-链地址法"><a href="#8-2-链地址法" class="headerlink" title="8.2 链地址法"></a>8.2 链地址法</h3><ul><li>每个数组单元中存储的不再是单个数据，而是一个链条（数组或链表）</li><li>一旦发现重复，将重复的元素插入到链表的首端或者末端即可</li><li>当查询时，先根据哈希化后的下标值找到对应的位置，再取出链表，依次查询要寻找的数据</li><li>链条的选择根据业务需要来决定。当需要插入到首位时（新插入的数据用于取出的可能性比较大），有限选择 链表。</li></ul><h3 id="8-3-开放地址法"><a href="#8-3-开放地址法" class="headerlink" title="8.3 开放地址法"></a>8.3 开放地址法</h3><ul><li><p>寻找空白的单元格来添加重复的数据。</p></li><li><p>探索空白位置的三种方式：</p><ul><li><p>线性探测</p><p>​ 往后 +1 插入 \ 查找 \ 删除，查找的空位置就停止，删除则将该位置的内容置 -1</p></li><li><p>二次探测</p><p>​ 对步长做了优化, 比如从下标值 x 开始, x+1², x+2², x+3²，可以一次性探测比较长的距离</p></li><li><p>再哈希法</p><p>​ 把关键字再用另外一个哈希函数，再做一次哈希化，用这次的结果作为步长</p></li></ul></li></ul><blockquote><p>一般而言，链地址法相对于开放地址法来说效率好，使用链地址法的情况也比较多</p></blockquote><h3 id="8-4-哈希表的实现"><a href="#8-4-哈希表的实现" class="headerlink" title="8.4 哈希表的实现"></a>8.4 哈希表的实现</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 存放的 数据 个数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">7</span>  <span class="token comment" spellcheck="true">// 方法</span>  <span class="token comment" spellcheck="true">// 设计 哈希函数</span>  <span class="token comment" spellcheck="true">// 1. 将 字符串 转换成 比较大的数字：hashCode</span>  <span class="token comment" spellcheck="true">// 2. 将 大的数字 hashCode 压缩到 数组范围（大小）内</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hashFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 定义 hashCode 变量</span>    <span class="token keyword">var</span> hashCode <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 2. 霍纳算法 计算 hashCode 的值</span>    <span class="token comment" spellcheck="true">// 2.1 cats => Unicode 编码</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hashCode <span class="token operator">=</span> <span class="token number">37</span> <span class="token operator">*</span> hashCode <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 取余操作</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> hashCode <span class="token operator">%</span> size    <span class="token keyword">return</span> index  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 插入 &amp; 修改 操作 的实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>put <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 通过 哈希化 index 获取 对应的 index</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 根据 index 创建 对应的 bucket</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 3. 若 bucket 为 undefined 则 需要创建</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 判断 是否是 修改操作</span>    <span class="token keyword">var</span> override <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value        override <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 进行 插入操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bucket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">// 数组扩容</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">></span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> newPrime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>newPrime<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取 操作 的实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 根据 key 获取 对应的 index</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 根据 index 获取 对应的 bucket</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3. 判断 bucket 是否为 undefined</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 4. 有 bucket 那么就进行 线性查询</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 依然没有找到，那么返回 null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除 操作 的实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 通过 key 获取 对应的 index</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 通过 index 获取 对应的 bucket</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 3. 如果 bucket 不存在 返回 null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 线性查找 bucket 中的元素，删除对应的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bucket<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">></span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">&lt;</span> <span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> newPrime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>newPrime<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 如果依然没找到 返回 null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断 是否为空 的函数 实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-5-哈希表扩容的思想"><a href="#8-5-哈希表扩容的思想" class="headerlink" title="8.5 哈希表扩容的思想"></a>8.5 哈希表扩容的思想</h3><ul><li>为什么需要扩容<ul><li>链地址法，loadFactor 可以大于 1， 所以这个哈希表可以无限制的插入新数据</li><li>随着数据量的增多，每一个 index 对应的 bucket 会越来越长，也就导致效率降低。</li></ul></li><li>如何进行扩容<ul><li>一般可以增大两倍然后向上取最近的质数</li><li>所有数据都要同时进行修改</li><li>虽然耗时但是是必须的</li></ul></li><li>在什么情况下扩容<ul><li>当 loadFactor &gt; 0.75 时进行扩容</li></ul></li></ul><blockquote><p>loadFactor 表示哈希表中元素的填满程度</p></blockquote><ul><li>实现：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 哈希表 扩容</span>HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>resize <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 保存 旧的数组内容</span>  <span class="token keyword">var</span> oldStorage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage  <span class="token comment" spellcheck="true">// 2. 重置属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> newLimit  <span class="token comment" spellcheck="true">// 3. 遍历 旧数组中的所有数据项，并且 重新插入到 哈希表中</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> oldStorage<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 3.1 bucket 为 null，说明这里没有数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">continue</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3.2 bucket 中有数据，那么将里边的数据 重新 哈希化赋值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断 质数 的函数</span>HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isPrime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 向上取 最近的质数</span>HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getPrime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num<span class="token operator">++</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> num<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios</title>
      <link href="/2020/07/03/axios/"/>
      <url>/2020/07/03/axios/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Promise"><a href="#1-1-Promise" class="headerlink" title="1.1 Promise"></a>1.1 Promise</h2><h3 id="1-1-1-异步任务类型"><a href="#1-1-1-异步任务类型" class="headerlink" title="1.1.1 异步任务类型"></a>1.1.1 异步任务类型</h3><ul><li>定时任务</li><li>Ajax 任务</li><li>事件函数</li></ul><h3 id="1-1-2-Promise-概述"><a href="#1-1-2-Promise-概述" class="headerlink" title="1.1.2 Promise 概述"></a>1.1.2 Promise 概述</h3><ul><li>Promise 是异步编程的一种解决方案，从语法上讲，Promise 是一个对象，从它可以获取异步操作的消息。</li><li>使用 Promise 主要有一下好处：<ul><li>可以避免多层异步调用嵌套问题（回调地狱）</li><li>Promise 对象提供简洁的 API，使得控制异步操作更加容易。</li></ul></li></ul><h3 id="1-1-3-基于-Promise-处理-Ajax-请求"><a href="#1-1-3-基于-Promise-处理-Ajax-请求" class="headerlink" title="1.1.3 基于 Promise 处理 Ajax 请求"></a>1.1.3 基于 Promise 处理 Ajax 请求</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'服务器错误'</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>        xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> p    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 处理多个异步请求</span>    <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data2'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data3'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="1-1-4-Promise-对象方法"><a href="#1-1-4-Promise-对象方法" class="headerlink" title="1.1.4 Promise 对象方法"></a>1.1.4 Promise 对象方法</h3><ul><li>Promise.all() 并发处理多个异步任务，所有任务都完成才能得到结果，得到的是所有异步任务的结果组成的数组。</li><li>Promise.race() 并发处理多个异步任务，一个任务完成了就能得到结果，得到的是最先返回的异步结果。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data2'</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data3'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// all() 方法接收所有参数组合成的数组</span>    Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// ["data", "data2", "data3"]</span>    <span class="token comment" spellcheck="true">// race() 方法接收所有参数组合成的数组</span>    Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// data</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="1-1-5-fetch"><a href="#1-1-5-fetch" class="headerlink" title="1.1.5 fetch"></a>1.1.5 fetch</h3><ul><li>基于 Promise 实现</li><li>更加简单的数据获取方式，可以看做是 xhr 的升级版</li><li>简单案例：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// text() 属于 fetchAPI 的一部分</span>    <span class="token comment" spellcheck="true">// 他返回一个 Promise 对象，用于获取后台返回的数据</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 字符串类型</span>    <span class="token comment" spellcheck="true">// data.json() 返回 json类型</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>常用配置选项：<ul><li>method(String)：HTTP 请求方法，默认为 GET<ul><li>GET</li><li>POST</li><li>PUT</li><li>DELETE</li></ul></li><li>body(String)：HTTP 的请求参数</li><li>header(Object)：HTTP 的请求头</li></ul></li></ul><h4 id="1-1-5-1-get-请求参数"><a href="#1-1-5-1-get-请求参数" class="headerlink" title="1.1.5.1 get 请求参数"></a>1.1.5.1 get 请求参数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 传统形式的 url</span><span class="token function">fetch</span><span class="token punctuation">(</span>  <span class="token string">'http://localhost:3000/data?id=123'</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'get'</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后台 url 路径为 /data</span>  <span class="token comment" spellcheck="true">// 后台通过 req.body.id获取</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Restful 形式的url</span><span class="token function">fetch</span><span class="token punctuation">(</span>  <span class="token string">'http://localhost:3000/data/123'</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> method<span class="token punctuation">:</span> <span class="token string">'get'</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 后台 url 路径为 /data/:id</span>  <span class="token comment" spellcheck="true">// 后台通过 req.params.id获取</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="1-1-5-2-post-请求参数"><a href="#1-1-5-2-post-请求参数" class="headerlink" title="1.1.5.2 post 请求参数"></a>1.1.5.2 post 请求参数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span>method<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span><span class="token string">'uname=lisi&amp;pwd=123'</span>     headers<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">}</span>                                          <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 后台 url 路径为 /data</span>      <span class="token comment" spellcheck="true">// 后台通过 req.body获取</span>     <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span>method<span class="token punctuation">:</span><span class="token string">'post'</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       uname<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>       pwd<span class="token punctuation">:</span><span class="token number">456</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>     headers<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="1-1-5-3-put-请求参数"><a href="#1-1-5-3-put-请求参数" class="headerlink" title="1.1.5.3 put 请求参数"></a>1.1.5.3 put 请求参数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data/123'</span><span class="token punctuation">,</span>                                <span class="token punctuation">{</span>method<span class="token punctuation">:</span><span class="token string">'put'</span><span class="token punctuation">,</span>        body<span class="token punctuation">:</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       uname<span class="token punctuation">:</span><span class="token string">'张三'</span><span class="token punctuation">,</span>       pwd<span class="token punctuation">:</span><span class="token number">456</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>     headers<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">'Content-Type'</span><span class="token punctuation">:</span><span class="token string">'application/json'</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="2-1-axios"><a href="#2-1-axios" class="headerlink" title="2.1 axios"></a>2.1 axios</h2><p>​ axios 是一个基于 Promise 用于浏览器和 node.js 的 HTTP 客户端。</p><p>它具有以下特征：</p><ul><li>支持浏览器和 node.js</li><li>支持 Promise</li><li>能拦截请求和响应</li><li>自动转换 JSON 数据</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入 axios.js</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/data'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//输出为：{data: "data", status: 200, statusText: "OK", headers: {…}, config: {…}, …}</span></code></pre><h3 id="2-1-1-axios-的参数传递"><a href="#2-1-1-axios-的参数传递" class="headerlink" title="2.1.1 axios 的参数传递"></a>2.1.1 axios 的参数传递</h3><ul><li>get</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通过 URL 传递参数</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/data?id=123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过 req.query.id 获取</span>axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/data?id/123'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过 req.params.id 获取</span><span class="token comment" spellcheck="true">// 通过 params 选项传递参数</span>axios  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过 req.query.id 获取</span></code></pre><ul><li>post</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 传递 json 类型数据</span>axios  <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/data/123'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    params<span class="token punctuation">:</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">'lisi'</span><span class="token punctuation">,</span>      pwd<span class="token punctuation">:</span> <span class="token number">123</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 通过 req.body.uname,req.body.pwd 获取</span><span class="token comment" spellcheck="true">// 通过 URLSearchParams 传递键值对参数</span><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'uname'</span><span class="token punctuation">,</span> <span class="token string">'lisi'</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/test'</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><ul><li>delete<ul><li>与 get 方式相同</li></ul></li><li>put<ul><li>与 post 方式相同</li></ul></li></ul><h3 id="2-1-2-axios-的全局配置"><a href="#2-1-2-axios-的全局配置" class="headerlink" title="2.1.2 axios 的全局配置"></a>2.1.2 axios 的全局配置</h3><ul><li>超时时间</li><li>默认地址</li><li>设置请求头</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 超时时间</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token number">3000</span><span class="token comment" spellcheck="true">// 默认地址</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3000/app'</span><span class="token comment" spellcheck="true">// 设置请求头</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'mytoken'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'...'</span></code></pre><h3 id="2-1-3-拦截器"><a href="#2-1-3-拦截器" class="headerlink" title="2.1.3 拦截器"></a>2.1.3 拦截器</h3><h4 id="2-1-3-1-请求拦截器"><a href="#2-1-3-1-请求拦截器" class="headerlink" title="2.1.3.1 请求拦截器"></a>2.1.3.1 请求拦截器</h4><p>​ 在请求发出去之前设置一些信息</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>config<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 可以给某些特定 Url 地址添加请求头</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>mytoken <span class="token operator">=</span> <span class="token string">'nihao'</span>    <span class="token keyword">return</span> config  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-1-3-2-响应拦截器"><a href="#2-1-3-2-响应拦截器" class="headerlink" title="2.1.3.2 响应拦截器"></a>2.1.3.2 响应拦截器</h3><p>​ 在获取数据之前对数据做一些加工处理</p><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">var</span> data <span class="token operator">=</span> res<span class="token punctuation">.</span>data    <span class="token keyword">return</span> data  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="3-1-async-和-await"><a href="#3-1-async-和-await" class="headerlink" title="3.1 async 和 await"></a>3.1 async 和 await</h2><ul><li><p>async 和 await 是 ES7 引入的新语法，可以更加方便的进行异步操作</p></li><li><p>async 关键字用在函数上，async 函数的返回值是 Promise 对象</p></li><li><p>await 关键字用在 async 函数中，相当于 Promise 中的 then() ,await 可得到异步结果。</p></li></ul><pre class=" language-java"><code class="language-java">async function <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> ret <span class="token operator">=</span> await axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/data'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ret<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-1-1-处理多个异步请求："><a href="#3-1-1-处理多个异步请求：" class="headerlink" title="3.1.1 处理多个异步请求："></a>3.1.1 处理多个异步请求：</h3><pre class=" language-javascript"><code class="language-javascript">axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> info <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'ret?info='</span> <span class="token operator">+</span> info<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 后台通过 req.query 获取数据</span>  <span class="token keyword">return</span> ret<span class="token punctuation">.</span>data<span class="token punctuation">}</span><span class="token function">queryData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
