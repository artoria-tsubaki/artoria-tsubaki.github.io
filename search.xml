<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vuejs基础的学习（一）</title>
      <link href="/2020/07/17/vuejs-ji-chu-de-xue-xi-yi/"/>
      <url>/2020/07/17/vuejs-ji-chu-de-xue-xi-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><h2 id="1-1-框架模式"><a href="#1-1-框架模式" class="headerlink" title="1.1 框架模式"></a>1.1 框架模式</h2><ul><li>MVC</li><li>MVP</li><li>MVVM</li></ul><h2 id="1-2-Vue-js-是什么"><a href="#1-2-Vue-js-是什么" class="headerlink" title="1.2 Vue.js 是什么"></a>1.2 Vue.js 是什么</h2><ul><li>Vue.js 不是一个框架，它只是聚焦视图层，是一个构建数据驱动的 Web 界面的库。通过简单的 API 提供了高效的数据绑定和灵活的组件系统。</li><li>Vue.js 的特性<ul><li>确实轻量</li><li>数据绑定</li><li>指令</li><li>插件化</li></ul></li></ul><h2 id="2-1-插值表达式"><a href="#2-1-插值表达式" class="headerlink" title="2.1 插值表达式"></a>2.1 插值表达式</h2><h3 id="2-1-1-插值"><a href="#2-1-1-插值" class="headerlink" title="2.1.1 插值"></a>2.1.1 插值</h3><ul><li>文本插值是最基本的形式，使用双大括号 <code>{ {} }</code> 来实现。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Text: { {text} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><ul><li>标签 <code>{ {text} }</code> 将会被相应的数据对象 text 属性的值替换掉，当 text 的值改变的时候，文本的值也会相应发生改变。</li><li>当只需渲染一次数据，后续数据变化不再关心可以通过 <code>*</code> 来实现</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Text: { {*text} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><ul><li>双大括号标签会把里边的值全部当成字符串来处理，如果是 HTML 片段，则可以使用三个大括号来绑定。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> { {{logo} }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>logo: '<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>DDEF<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>'</code></pre><ul><li>双大括号标签还可放在 HTML 标签内。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ {id} }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><h3 id="2-1-2-表达式"><a href="#2-1-2-表达式" class="headerlink" title="2.1.2 表达式"></a>2.1.2 表达式</h3><ul><li>双大括号标签也支持表达式形式的值，表达式可以由 JavaScript 表达式和过滤器构成。</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- JS 表达式 --></span>{ { cents/100 } } { { true? 1 : 0 } } { { example.split(",") } }<span class="token comment" spellcheck="true">&lt;!-- 过滤器 --></span>{ { example | toUpperCase } } { {example | filterA | filterB} }</code></pre><h2 id="2-2-分隔符"><a href="#2-2-分隔符" class="headerlink" title="2.2 分隔符"></a>2.2 分隔符</h2><p>通过配置目录文件<code>src/config.js</code>中的 <code>vue.config.delimiters</code> 来修改默认的文本插值的分隔符</p><h2 id="3-1-指令"><a href="#3-1-指令" class="headerlink" title="3.1 指令"></a>3.1 指令</h2><ul><li>指令是特殊的带有前缀 v- 的特性。</li><li>指令的值限定为绑定表达式。</li><li>指令的功能就是当前表达式改变时把某些特殊的行为应用到 DOM 上。</li></ul><h2 id="3-2-内部指令"><a href="#3-2-内部指令" class="headerlink" title="3.2 内部指令"></a>3.2 内部指令</h2><h3 id="3-2-1-v-if"><a href="#3-2-1-v-if" class="headerlink" title="3.2.1 v-if"></a>3.2.1 v-if</h3><ul><li>v-if 指令可以完全根据表达式的值在 DOM 中生成或移除一个元素。</li><li>如果 v-if 表达式赋值为 false，那么对应的元素就会从 DOM 中移除。</li><li>如果 v-if 表达式赋值为 true，那么对应的元素的一个克隆将被重新插入 DOM 中。</li><li>下例代码中的 p 元素即从 DOM 中移除。</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 切换单个元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>native<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>example<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> exampleVM2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#example'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      greeting<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 切换多个元素，可以用 template 标签包装元素 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>paragraph1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>paragraph2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-2-v-show"><a href="#3-2-2-v-show" class="headerlink" title="3.2.2 v-show"></a>3.2.2 v-show</h3><ul><li>根据表达式的值来显示或隐藏 HTML 元素</li><li>当 v-show 赋值为 false 时，元素将被隐藏。查看 DOM 时，元素上多了一个内联样式 <code>style=&quot;display:none&quot;</code>。</li><li>下例代码的 p 元素被隐藏,其样式为 <code>display:none</code>。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>greeting<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Hello!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>var vm = new Vue({ el: '#app', data: { message: '', greeting: false, } })</code></pre><ul><li>v-show 不支持 &lt; template &gt; 语法</li><li>v-if 是个真实的条件渲染，它是惰性的——如果初始渲染的条件是 false，则什么也不做，在条件第一次变为 true 时才会开始局部编译（编译会被缓存）；v-show 元素始终被编译并保留，只是简单地基于 CSS 切换。</li><li>一般来说，v-if 有更高的切换消耗，而 v-show 有更高的渲染消耗。因此当需要频繁地切换，使用 v-show 更好；在运行时条件不大可能改变，使用 v-if 更好。</li></ul><h3 id="3-2-3-v-else"><a href="#3-2-3-v-else" class="headerlink" title="3.2.3 v-else"></a>3.2.3 v-else</h3><ul><li>v-else 就是 JavaScript 中 else 的意思，它必须跟着 v-if 或者 v-show，从当 else 功能。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是对的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>我是错的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      ok<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 当我们使用 v-show的时候，可使用另一个 v-show 来替换 v-else --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是对的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是错的！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-4-v-model"><a href="#3-2-4-v-model" class="headerlink" title="3.2.4 v-model"></a>3.2.4 v-model</h3><ul><li>v-model 指令用来在 input、select、text、CheckBox、radio 等表单控件上创建双向数据绑定。</li><li>根据控件类型 v-model 自动选取正确的方法更新元素。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    姓名：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.name<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    性别：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>One<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Two<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.sex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    兴趣：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>book<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>阅读<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swim<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swim<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>swim<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游泳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>game<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.interests<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    身份：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data.identity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>worker<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>工人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doctor<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>医生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        sex<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>        interests<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        identity<span class="token punctuation">:</span> <span class="token string">''</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>除了上述用法，在 v-model 指令后还能添加多个参数<ul><li>number：将用户的输入自动转换为 Number 类型（如果原值的转换结果为 NaN，则返回原值）</li><li>lazy：将数据改到在 change 事件中发生（当 input 输入框失去焦点的时候 msg 的值才发生变化）。</li><li>debounce：设置一个最小延时，在每次敲击后延时同步输入框的值与数据。(已经废弃，需要的话使用 lodash 的 debounce 方法来消抖)，参考<code>https://segmentfault.com/a/1190000015312430</code> 网址</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- lazy 参数 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>  { {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'内容是在 change 事件后才改变的'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-5-v-for"><a href="#3-2-5-v-for" class="headerlink" title="3.2.5 v-for"></a>3.2.5 v-for</h3><ul><li>我们可以使用 v-for 指令基于原数据重复渲染元素。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      { {index} } -{ {item.parentMessage} } { {item.msg} }    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      items<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> parentMessage<span class="token punctuation">:</span> <span class="token string">'滴滴'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'滴滴顺风车'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">'滴滴专车'</span> <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li>key 的作用：帮助 Vue 区分不同的元素，从而提高性能。</li></ul><h3 id="3-2-6-v-text"><a href="#3-2-6-v-text" class="headerlink" title="3.2.6 v-text"></a>3.2.6 v-text</h3><ul><li>v-text 指令可以更新元素的 textContent。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- same as --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{ {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-7-v-html"><a href="#3-2-7-v-html" class="headerlink" title="3.2.7 v-html"></a>3.2.7 v-html</h3><ul><li>v-html 指令可以更新元素的 innerHTML，不建议直接在网站上动态渲染任意 HTML 片段，容易导致 XSS 攻击。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- same as --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {{html} }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-8-v-bind"><a href="#3-2-8-v-bind" class="headerlink" title="3.2.8 v-bind"></a>3.2.8 v-bind</h3><ul><li>v-bind 指令用于响应更新 HTML 特性，将一个或多个 attribute，或者一个组件 prop 动态绑定到表达式</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 绑定 attribute --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[classA,{classB:isB,classC:isC}]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      classA<span class="token punctuation">:</span> <span class="token string">'A'</span><span class="token punctuation">,</span>      isB<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      isC<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-9-v-on"><a href="#3-2-9-v-on" class="headerlink" title="3.2.9 v-on"></a>3.2.9 v-on</h3><ul><li>v-on 指令用于绑定事件监听器。</li><li>使用在普通元素上，只能监听原生 DOM 事件；使用在自定义元素组件上，可以监听子组件触发的自定义事件</li><li>如果在内联语句处理器中访问原生 DOM 事件，则可以用特殊变量 $event 把它传入方法。</li><li>v-on 后面不仅可以跟参数，还可以增加修饰符<ul><li>.stop：停止冒泡</li><li>.prevent：停止默认行为</li><li>.self：只当事件是从侦听器绑定的元素本身触发时才出发回调</li></ul></li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 方法处理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 内联语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat(<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>,$event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事件修饰符 --></span><span class="token comment" spellcheck="true">&lt;!-- 停止冒泡 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 串联修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.13</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 自定义按键修饰符 全局config.keyCodes 对象 --></span>Vue.config.keyCodes.aaa = 65</code></pre><ul><li><p>事件绑定 – 参数传递</p><ul><li>如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数。</li><li>如果事件绑定函数调用（内联语句的形式），那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是 $event</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handle1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  &lt;button v-on:click="handle2(123,"hello",$event)">点击2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>js/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span><span class="token punctuation">{</span>      handle1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 点击1</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      handle2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">,</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 123 "hello" 点击二</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="3-2-10-v-ref"><a href="#3-2-10-v-ref" class="headerlink" title="3.2.10 v-ref"></a>3.2.10 v-ref</h3><ul><li>在父组件上注册一个子组件的索引，便于直接访问。</li><li>不需要表达式，必须提供参数 id</li><li>可以通过父组件的 $refs 对象访问子组件</li></ul><h3 id="3-2-11-v-slot"><a href="#3-2-11-v-slot" class="headerlink" title="3.2.11 v-slot"></a>3.2.11 v-slot</h3><ul><li>提供具名插槽或需要接收 prop 的插槽</li></ul><h3 id="3-2-12-v-pre"><a href="#3-2-12-v-pre" class="headerlink" title="3.2.12 v-pre"></a>3.2.12 v-pre</h3><ul><li>编译时跳过当前元素和其子元素。</li><li>用来显示原始的标签</li></ul><h3 id="3-2-13-v-cloak"><a href="#3-2-13-v-cloak" class="headerlink" title="3.2.13 v-cloak"></a>3.2.13 v-cloak</h3><ul><li>和 CSS 规则如 <code>[v-cloak]{display:none}</code> 一起使用时，这个指令可以隐藏未编译的 双大括号标签直到实例准备完毕。</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token attribute">[v-cloak]</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-cloak</span><span class="token punctuation">></span></span>    { {msg} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h3 id="3-2-14-v-once"><a href="#3-2-14-v-once" class="headerlink" title="3.2.14 v-once"></a>3.2.14 v-once</h3><ul><li><p>只编译一次，显示后的内容不再具有响应式功能。</p></li><li><p>元素/组件及其所有的子节点都将被视为静态资源内容并跳过</p></li><li><p>目的是为了节省性能。</p></li></ul><h2 id="4-1-自定义属性"><a href="#4-1-自定义属性" class="headerlink" title="4.1 自定义属性"></a>4.1 自定义属性</h2><h4 id="4-1-1-为何需要自定义指令"><a href="#4-1-1-为何需要自定义指令" class="headerlink" title="4.1.1 为何需要自定义指令"></a>4.1.1 为何需要自定义指令</h4><p>​ 内置指令不满足需求</p><h4 id="4-1-2-自定义指令的语法规则"><a href="#4-1-2-自定义指令的语法规则" class="headerlink" title="4.1.2 自定义指令的语法规则"></a>4.1.2 自定义指令的语法规则</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-focus</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// el 表示指令所绑定的元素</span>      el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-1-3-带参数的自定义指令"><a href="#4-1-3-带参数的自定义指令" class="headerlink" title="4.1.3 带参数的自定义指令"></a>4.1.3 带参数的自定义指令</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'color'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// el 表示指令所绑定的元素</span>      el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> orange      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="4-1-4-局部指令"><a href="#4-1-4-局部指令" class="headerlink" title="4.1.4 局部指令"></a>4.1.4 局部指令</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 局部指令只能在本组件使用</span><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>    color<span class="token punctuation">:</span> <span class="token punctuation">{</span>      bind<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">.</span>color      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    focus<span class="token punctuation">:</span> <span class="token punctuation">{</span>      inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="5-1-计算属性"><a href="#5-1-计算属性" class="headerlink" title="5.1 计算属性"></a>5.1 计算属性</h2><h4 id="5-1-1-为何需要计算属性"><a href="#5-1-1-为何需要计算属性" class="headerlink" title="5.1.1 为何需要计算属性"></a>5.1.1 为何需要计算属性</h4><p>​ 表达式的计算逻辑可能会比较复杂，使用计算属性可以使模板内容更加简洁</p><h4 id="5-1-2-计算属性的语法规则"><a href="#5-1-2-计算属性的语法规则" class="headerlink" title="5.1.2 计算属性的语法规则"></a>5.1.2 计算属性的语法规则</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {reverseString} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'nihao'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 计算属性基于 data 中的值来处理</span>      reverseString<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>msg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="5-1-3-计算属性和方法的区别"><a href="#5-1-3-计算属性和方法的区别" class="headerlink" title="5.1.3 计算属性和方法的区别"></a>5.1.3 计算属性和方法的区别</h4><ul><li>计算属性是基于它们的依赖进行缓存的</li><li>方法不存在缓存</li></ul><h2 id="6-1-过滤器"><a href="#6-1-过滤器" class="headerlink" title="6.1 过滤器"></a>6.1 过滤器</h2><h4 id="6-1-1-过滤器的作用"><a href="#6-1-1-过滤器的作用" class="headerlink" title="6.1.1 过滤器的作用"></a>6.1.1 过滤器的作用</h4><p>​ 格式化数据，比如将字符串格式化为首字母大写，将日期格式化为指定格式等。</p><h4 id="6-1-2-自定义过滤器"><a href="#6-1-2-自定义过滤器" class="headerlink" title="6.1.2 自定义过滤器"></a>6.1.2 自定义过滤器</h4><pre class=" language-javascript"><code class="language-javascript">Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'upper'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> value<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="6-1-3-过滤器的使用"><a href="#6-1-3-过滤器的使用" class="headerlink" title="6.1.3 过滤器的使用"></a>6.1.3 过滤器的使用</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg | upper} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {msg | upper | lower} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id | formatId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="6-1-4-局部过滤器"><a href="#6-1-4-局部过滤器" class="headerlink" title="6.1.4 局部过滤器"></a>6.1.4 局部过滤器</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">'nihao'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 只能在本组件中使用</span>    filters<span class="token punctuation">:</span> <span class="token punctuation">{</span>      upper<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="6-1-5-带参数的过滤器"><a href="#6-1-5-带参数的过滤器" class="headerlink" title="6.1.5 带参数的过滤器"></a>6.1.5 带参数的过滤器</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>{ {date | format("yyyy-MM-dd")} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">'format'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> nowDate          <span class="token keyword">return</span> nowDate <span class="token operator">+</span><span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"-"</span> <span class="token operator">+</span> value<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    data<span class="token punctuation">:</span><span class="token punctuation">{</span>      date<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="7-1-侦听器"><a href="#7-1-侦听器" class="headerlink" title="7.1 侦听器"></a>7.1 侦听器</h2><h4 id="7-1-1-侦听器的触发条件和应用场景"><a href="#7-1-1-侦听器的触发条件和应用场景" class="headerlink" title="7.1.1 侦听器的触发条件和应用场景"></a>7.1.1 侦听器的触发条件和应用场景</h4><ul><li>数据一旦变化就会通知侦听器所绑定方法</li><li>当数据变化时执行异步操作或开销较大的操作用侦听器</li></ul><h4 id="7-1-2-侦听器的语法规则"><a href="#7-1-2-侦听器的语法规则" class="headerlink" title="7.1.2 侦听器的语法规则"></a>7.1.2 侦听器的语法规则</h4><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>    用户：  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model.lazy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{ {tip} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      tip<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      checkName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>uname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>uname <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            that<span class="token punctuation">.</span>tip <span class="token operator">=</span> <span class="token string">'用户已存在，请更改用户名'</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            that<span class="token punctuation">.</span>tip <span class="token operator">=</span> <span class="token string">'可以使用当前用户名'</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      uname<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkName</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tip <span class="token operator">=</span> <span class="token string">'正在验证...'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="8-1-生命周期"><a href="#8-1-生命周期" class="headerlink" title="8.1 生命周期"></a>8.1 生命周期</h2><h3 id="8-1-1-主要阶段"><a href="#8-1-1-主要阶段" class="headerlink" title="8.1.1 主要阶段"></a>8.1.1 主要阶段</h3><ul><li>挂载（初始化相关属性）<ul><li>beforeCreate</li><li>created</li><li>beforeMount</li><li>mounted</li></ul></li><li>更新（元素或组件的变更操作）<ul><li>beforeUpdate</li><li>updated</li></ul></li><li>销毁（销毁相关属性）<ul><li>beforeDestroy</li><li>destroyed</li></ul></li></ul><h2 id="9-1-表单操作"><a href="#9-1-表单操作" class="headerlink" title="9.1 表单操作"></a>9.1 表单操作</h2><h3 id="9-1-1-文本框"><a href="#9-1-1-文本框" class="headerlink" title="9.1.1 文本框"></a>9.1.1 文本框</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>var vm = new Vue({ data:{ uname:'' } })</code></pre><h3 id="9-1-2-单选框"><a href="#9-1-2-单选框" class="headerlink" title="9.1.2 单选框"></a>9.1.2 单选框</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ gender:1 } })</code></pre><h3 id="9-1-3-复选框"><a href="#9-1-3-复选框" class="headerlink" title="9.1.3 复选框"></a>9.1.3 复选框</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ball<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>篮球<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>唱歌<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobby<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>code<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>敲代码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ hobby:["2","3"] } })</code></pre><pre><code>    ###     9.1.4 下拉菜单</code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 单选 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>job<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择职业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>工人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>医生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 多选 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jobs<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>请选择职业<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>教师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>工人<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>医生<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ job:3, jobs:["2","3"] } })</code></pre><h3 id="9-1-5-文本域"><a href="#9-1-5-文本域" class="headerlink" title="9.1.5 文本域"></a>9.1.5 文本域</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>var vm = new Vue({ data:{ desc:"nihao" } })</code></pre><pre><code>### 9.1.6 表单域修饰符</code></pre><ul><li>number：转化为数值</li><li>trim：去掉开头和结尾的空格</li><li>lazy：将 input 事件转换为 change 事件</li></ul><h2 id="10-1-数组更新检测"><a href="#10-1-数组更新检测" class="headerlink" title="10.1 数组更新检测"></a>10.1 数组更新检测</h2><h3 id="10-1-1-变更方法"><a href="#10-1-1-变更方法" class="headerlink" title="10.1.1 变更方法"></a>10.1.1 变更方法</h3><p>​ 变更方法会变更调用了这些方法的原始数组，Vue 将被侦听的数组进行了包裹，所以它们也将会触发视图更新，这些被包裹的方法有：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h3 id="10-1-2-替换数组"><a href="#10-1-2-替换数组" class="headerlink" title="10.1.2 替换数组"></a>10.1.2 替换数组</h3><p>​ 它们不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以用新数组替换旧数组，这些方法有：</p><ul><li>filter()</li><li>concat()</li><li>slice()</li></ul><h3 id="10-1-3-修改响应式数据"><a href="#10-1-3-修改响应式数据" class="headerlink" title="10.1.3 修改响应式数据"></a>10.1.3 修改响应式数据</h3><ul><li>Vue.set(vm.items, indexOfItem, newValue)</li><li>vm.$set(vm.items, indexOfItem, newValue)<ul><li>第一个参数表示要处理的数组名称</li><li>第二个参数表示要处理的数组的索引</li><li>第三个参数表示要处理的数组的值</li></ul></li></ul><h2 id="11-1-案例"><a href="#11-1-案例" class="headerlink" title="11.1 案例"></a>11.1 案例</h2><pre><code>D:\Learn\learnVuejs\demo2</code></pre><ul><li>图书列表<ul><li>实现静态列表效果</li><li>基于数据实现模板效果</li><li>处理每行的操作按钮（阻止 a 标签的默认行为）</li></ul></li><li>添加图书<ul><li>实现表单的静态效果</li><li>添加图书表单域数据绑定</li><li>添加按钮事件绑定</li><li>实现添加业务逻辑</li></ul></li><li>修改图书<ul><li>修改信息填充到表单</li><li>修改后重新填充表单</li><li>重用添加和修改的方法</li></ul></li><li>删除图书<ul><li>删除按钮绑定事件处理方法</li><li>实现删除的事件逻辑</li></ul></li><li>常用特性应用场景<ul><li>过滤器（格式化日期）</li><li>自定义指令（自动获取焦点）</li><li>计算属性（统计图书总数）</li><li>侦听器（验证图书的存在性）</li><li>生命周期（图片数据处理）</li></ul></li></ul><h2 id="12-1-组件注册"><a href="#12-1-组件注册" class="headerlink" title="12.1 组件注册"></a>12.1 组件注册</h2><pre><code>### 12.1.1 全局组件注册</code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--驼峰式命名的组件，在使用的时候只能在标签模板中必须使用短横线的方式--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button-counter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 可以使用驼峰式命名法和短横线命名 buttonCounter</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'button-counter'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// data 必须是一个函数</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 组件模板必须只有一个根元素</span>    <span class="token comment" spellcheck="true">// 组件模板内容可以是模板字符串</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;button @click="handle">点击了{ {count} }次&lt;/button>`</span></span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      handle<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="12-1-2-局部组件注册"><a href="#12-1-2-局部组件注册" class="headerlink" title="12.1.2 局部组件注册"></a>12.1.2 局部组件注册</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello-world</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello-world</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> HelloWorld <span class="token operator">=</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        msg<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>{ {msg} }&lt;/div>`</span></span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'hello-world'</span><span class="token punctuation">:</span> HelloWorld    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="13-1-组件间数据交互"><a href="#13-1-组件间数据交互" class="headerlink" title="13.1 组件间数据交互"></a>13.1 组件间数据交互</h2><h3 id="13-1-1-父组件向子组件传值"><a href="#13-1-1-父组件向子组件传值" class="headerlink" title="13.1.1 父组件向子组件传值"></a>13.1.1 父组件向子组件传值</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 父组件通过属性来将值传递给子组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 组件内部通过 props 接收传递过来的值 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'menu-item'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token string">'&lt;div>{ {title} }&lt;/div>'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">'来自父组件的值'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>【注意点】：</p><ul><li><p>DOM 元素不区分大小写，所以在 props 中使用驼峰形式，模板中需要使用短横线的形式，但在字符串模板( template )中没这个限制。</p></li><li><p>props 属性值类型：</p><ul><li>字符串 String</li><li>数值 Number</li><li>布尔值 Boolean</li><li>数组 Array</li><li>对象 Object</li></ul><p>其中对于 数值 Number 和 布尔值 Boolean，在父组件中通过 v-bind 动态绑定数据，子组件获取得数据的数值类型为 Number 或 Boolean，否则都为 String。</p></li></ul><h3 id="13-1-2-子组件向父组件传值"><a href="#13-1-2-子组件向父组件传值" class="headerlink" title="13.1.2 子组件向父组件传值"></a>13.1.2 子组件向父组件传值</h3><ul><li>子组件通过自定义事件向父组件传递信息</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>$emit(<span class="token punctuation">"</span>enlarge-text<span class="token punctuation">"</span>,5)<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>扩大字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><ul><li>父组件监听子组件的事件</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>menu-item</span> <span class="token attr-name"><span class="token namespace">v-on:</span>enlagre-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fontSize +<span class="token punctuation">=</span> $event<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>menu-item</span><span class="token punctuation">></span></span></code></pre><p>【注意点】：props 是单向数据流，我们不应该通过 props 来从子组件向父组件传值。</p><h3 id="13-1-3-兄弟组件间传值"><a href="#13-1-3-兄弟组件间传值" class="headerlink" title="13.1.3 兄弟组件间传值"></a>13.1.3 兄弟组件间传值</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 单独的事件中心管理组件间的通信</span><span class="token keyword">var</span> eventHub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 监听事件</span>eventHub<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 触发事件</span>eventHub<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 销毁事件</span>eventHub<span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">'add-todo'</span><span class="token punctuation">)</span></code></pre><h2 id="14-1-组件插槽"><a href="#14-1-组件插槽" class="headerlink" title="14.1 组件插槽"></a>14.1 组件插槽</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span>有个错误<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span> // ERROR:有个错误  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span>有个警告<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span> // ERROR:有个警告 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alert-box</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>alert-box</span><span class="token punctuation">></span></span> //  ERROR:默认内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'alert-box'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`            &lt;div>              &lt;strong>ERROR:&lt;/strong>                &lt;slot>默认内容&lt;/slot>          &lt;/div>        `</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="14-1-1-插槽作用域"><a href="#14-1-1-插槽作用域" class="headerlink" title="14.1.1 插槽作用域"></a>14.1.1 插槽作用域</h3><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 父级插槽可以访问相同实例 property 作用域，即vm实例的data值，但不能访问 test-one 组件的作用域 --></span><span class="token comment" spellcheck="true">&lt;!-- 插槽内容是传递给 test-one 的，而不是在 test-one 组件内部定义的 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>test-one</span><span class="token punctuation">></span></span>    Logged in as { { user.name } }    <span class="token comment" spellcheck="true">&lt;!-- 显示结果为 saber --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>test-one</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'test-one'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`     &lt;a href="http://www.baidu.com">       &lt;slot>&lt;/slot>     &lt;/a>      `</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>          name<span class="token punctuation">:</span> <span class="token string">'artoria'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'saber'</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="14-1-2-具名插槽"><a href="#14-1-2-具名插槽" class="headerlink" title="14.1.2 具名插槽"></a>14.1.2 具名插槽</h3><p>​ 有时我们需要多个插槽。如下例 <base-layout> 组件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 我们希望把页头放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 我们希望把主要内容放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 我们希望把页脚放这里 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>​ 我们可以通过 <slot> 元素的 name 属性来具体名称的插槽</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>​ 在向具名插槽提供内容的时候，我们需要在 &lt; template &gt; 元素上使用 <code>v-slot</code> 指令。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-layout</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>header</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Here might be a page title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  &lt; template >    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>A paragraph for the main content.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>And another one.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>footer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Here's some contact info<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>base-layout</span><span class="token punctuation">></span></span></code></pre><p>​ 【注意点】：<code>v-slot</code> 只能添加在 &lt; template &gt; 上。</p><h3 id="14-1-3-作用域插槽"><a href="#14-1-3-作用域插槽" class="headerlink" title="14.1.3 作用域插槽"></a>14.1.3 作用域插槽</h3><p>​ 有时我们需要让插槽的内容能够访问子组件中的数据。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 这里的插槽内容只能获取本实例即 vm 的 data 数据，而获取不到子组件的数据 --></span>  { {user.firstName} }<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'current-user'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        user<span class="token punctuation">:</span> <span class="token punctuation">{</span>          firstName<span class="token punctuation">:</span> <span class="token string">'Artoria'</span><span class="token punctuation">,</span>          lastName<span class="token punctuation">:</span> <span class="token string">'Pendragon'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`        &lt;span>          &lt;slot>            { {user.lastName} }          &lt;/slot>          &lt;/span>      `</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>​ 我们可以通过作用域插槽来解决这个问题。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 在子组件的模板中 --></span><span class="token comment" spellcheck="true">&lt;!-- 绑定在 &lt;slot> 元素上的 attribute 被称为 插槽 prop --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">:user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {user.lastName} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 在父级作用域中，我们可以使用带值的 v-slot 来定义我们提供的插槽的名字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slotProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {slotProps.user.firstName} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">></span></span></code></pre><p>【注意点】：</p><ul><li>当被提供的内容只有默认插槽的时候，组件的标签可以被当成模板来使用，这时我们可以把 v-slot 直接用在组件上。</li><li>默认插槽的缩写语法不能和具名插槽混用，会导致作用域不明确</li><li>可以使用 解构解析 来传入具体的 插槽 prop，如上例：</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>current-user</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ { user } }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    { {user.firstName} }  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>current-user</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vuejs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vuejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构的实现（一）</title>
      <link href="/2020/07/17/shu-ju-jie-gou-yu-suan-fa-yi/"/>
      <url>/2020/07/17/shu-ju-jie-gou-yu-suan-fa-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h1><h2 id="1-What"><a href="#1-What" class="headerlink" title="1.What"></a>1.What</h2><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h2><ul><li>数组是一种 <code>线性结构</code></li><li>数组的优点：<ul><li>通过下标查找数据十分方便。</li></ul></li><li>数组的缺点：<ul><li>创建需要申请一段连续的内存空间，大小是固定的，可能会需要扩容（耗时耗力）</li><li>添加和删除元素的效率低，可能会需要进行大量的元素的</li></ul></li></ul><h2 id="3-栈"><a href="#3-栈" class="headerlink" title="3. 栈"></a>3. 栈</h2><ul><li>栈是一种受限的线性结构，只能从表的一端添加或删除元素。这一端称为<code>栈顶</code> ，另一端称为栈底。</li><li>栈的特点是后进先出（LIFO）</li><li>函数调用栈<ul><li>A 调用 B，B 中又调用 C，C 中又调用 D</li><li>在执行过程中，会先将 A 压入栈，A 没有执行完，所以不会出栈</li><li>在 A 的执行过程中调用了 B ，所以 B 压入栈，这时 B 在栈顶，A 在栈底</li><li>B 调用了 C ，所以 C 会压栈，并且在栈顶，而 C 调用了 D，D 会压入栈顶</li><li>当前栈的顺序是 A –&gt; B –&gt; C –&gt; D</li><li>出栈的顺序为 D –&gt; C –&gt; B –&gt; A</li></ul></li><li>递归调用没有跳出条件的时候会造成 <code>栈溢出</code> 的现象。</li><li>栈的实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通过 类 来实现 栈</span><span class="token keyword">class</span> <span class="token class-name">Stack</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过 数组 来实现 栈中数据的存放</span>  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 栈的相关操作</span>  <span class="token comment" spellcheck="true">// 1. 将元素压入栈</span>  <span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 从栈中取出元素</span>  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 3. 查看一下栈顶元素</span>  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 4. 判断栈是否为空</span>  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 5.获取栈中元素的个数</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 6. toString 方法</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>对栈的使用： 实现 NumberObject.toString(2) 十进制转二进制</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">dec2bin</span><span class="token punctuation">(</span>decNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// decNumber 为 0 时退出循环</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>decNumber <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在栈中存储 十进制 模二 的余数</span>    s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>decNumber <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 将 decNumber 除二 赋予自身</span>    decNumber <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>decNumber <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> binNumber <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment" spellcheck="true">// s 中还有数据都赋值给 binNumber</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 字符串拼接</span>    binNumber <span class="token operator">+</span><span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> binNumber <span class="token operator">*</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="4-队列"><a href="#4-队列" class="headerlink" title="4. 队列"></a>4. 队列</h2><ul><li><p>队列也是一种受限的线性结构，只允许在表的 <code>前端</code> 进行删除操作，表的 <code>后端</code> 进行插入操作</p></li><li><p>队列的特点是先进先出（FIFO）</p></li><li><p>队列的应用：</p><ul><li>打印队列：优先放入的文档，优先被取出。</li><li>线程队列：线程队列会依照次序来实现线程。</li></ul></li><li><p>队列的实现：</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 通过 数组 来实现 队列中数据的存放</span>  items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 队列中的相关操作</span>  <span class="token comment" spellcheck="true">// 1. 实现 队列 的添加操作</span>  <span class="token function">enqueue</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 2. 实现 队列 的删除操作</span>  <span class="token function">delqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 3. 查看 队列的 最前面的元素</span>  <span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 4. 判断 队列 是否为空</span>  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 5. 队列的 大小</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 6. 重写 toString 方法</span>  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return this.items.join(' ')</span>    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">' '</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>击鼓传花的实现<ul><li>规则：几个朋友一起玩一个游戏，围成一圈，开始数数，数到某个数字的人自动淘汰。最后剩下的这个人会获得胜利，请问最后剩下的是原来在哪一个位置的人。</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">passGame</span><span class="token punctuation">(</span>nameList<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 1. 将 玩家存入 队列</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nameList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>nameList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 3. 直到 队列 的长度 等于 1 停止操作</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 2.1 小于 num 的数 取出后存入 尾部</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      q<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">delqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.2 等于 num 的数 直接删除</span>    q<span class="token punctuation">.</span><span class="token function">delqueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> endName <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'最终的人是：'</span> <span class="token operator">+</span> endName<span class="token punctuation">)</span>  <span class="token keyword">return</span> nameList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>endName<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'artoria'</span><span class="token punctuation">,</span> <span class="token string">'noa'</span><span class="token punctuation">,</span> <span class="token string">'sora'</span><span class="token punctuation">,</span> <span class="token string">'tsubaki'</span><span class="token punctuation">,</span> <span class="token string">'saber'</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">passGame</span><span class="token punctuation">(</span>lists<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="4-1-优先级队列"><a href="#4-1-优先级队列" class="headerlink" title="4.1 优先级队列"></a>4.1 优先级队列</h3><ul><li>优先级队列的特点：在插入每一个元素的时候回考虑数据的优先级，和其他数据优先级进行比较，在比较完成后，可以得出这个元素只在队列中正确的位置。</li><li>需要考虑的问题：每个元素不再只是一个数据，而且包含数据的优先级。</li><li>生活中的应用：机场登机顺序，急诊科的处理，通过优先级队列重新排序队列中的顺序</li><li>优先级队列的实现：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">priorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义 一个数组 接收 数据对象</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 定义 一个数据对象类</span>  <span class="token keyword">function</span> <span class="token function">queueElement</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>priority <span class="token operator">=</span> priority  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 队列 插入数据的功能</span>  priorityQueue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>enqueue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newElem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">queueElement</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> priority<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 数组中没有数据 直接存放</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newElem<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 判断插入的数 是否 都大于 数组中的数，表示是否 已插入</span>      <span class="token keyword">var</span> isAdded <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>priority <span class="token operator">></span> newElem<span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 插入</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> newElem<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 说明 已插入</span>          isAdded <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token keyword">break</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 插入的数 大于 所有 数组中的数</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isAdded<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 直接插入</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>newElem<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 队列 移除数据的功能</span>  priorityQueue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>dequeue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">priorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'saber'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'artoria'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'noa'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'tsubaki'</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span>pq<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token string">'minami'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span></code></pre><h2 id="5-链表"><a href="#5-链表" class="headerlink" title="5. 链表"></a>5. 链表</h2><ul><li>功能：存储多个元素</li><li>特点：<ul><li>链表中的元素在内存中不必是连续的空间。</li><li>每个元素由一个存储元素本身的节点和一个指向下一个元素的引用（指针）组成</li></ul></li><li>相对于数组的优点：<ul><li>内存空间不是必须连续的，可以实现灵活的内存动态管理</li><li>链表创建的时候不必确定大小，可以无限的延伸下去</li><li>链表在插入和删除数据时，时间复杂度能达到 O(1)，效率高很多。</li></ul></li><li>相对于数组的缺点：<ul><li>访问任何位置的元素都需要从头开始访问</li><li>无法通过下标直接访问元素</li></ul></li><li>什么是链表<ul><li>类似于 <code>火车</code> ，有一个火车头，火车头会连接一个节点，节点上有乘客（类似于数据），并且这个节点会连接下一个节点，一次类推。</li></ul></li></ul><h3 id="5-1-单向链表"><a href="#5-1-单向链表" class="headerlink" title="5.1 单向链表"></a>5.1 单向链表</h3><ul><li><p>只能从头遍历到尾 或 从尾部遍历到头部</p></li><li><p>实现的原理是上一个链表中有一个指向下一个的引用</p></li><li><p>缺点：</p><ul><li>可以轻松的到达下一个节点，但是回到前一个节点是很难的。</li></ul></li><li><p>单向链表的实现</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 内部类 存储数据的类</span>  <span class="token keyword">function</span> <span class="token function">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 内部属性</span>  <span class="token comment" spellcheck="true">// 默认 head 指向 null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">// 实现 添加方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>append <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 创建 数据类</span>    <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 判断添加的 是否是 第一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newNode    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.1获取 当前第一个节点</span>      <span class="token keyword">var</span> currentNode <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head      <span class="token comment" spellcheck="true">// 2.2 获取 最后一个节点</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>currentNode<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentNode <span class="token operator">=</span> currentNode<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 2.3 在当前最后一节节点 追加</span>      currentNode<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 toString 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> resultStr <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      resultStr <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">' '</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> resultStr  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 插入方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建 数据类</span>    <span class="token keyword">var</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 当前 读取到的 数据类</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 当前 未插入前的 第一个数据类</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token comment" spellcheck="true">// 1. 判断 position 是否越界</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 2. 在 表头 插入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第一个 数据类</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newNode      <span class="token comment" spellcheck="true">// 插入的 数据类 的 next 指向原来的 第一个数据类</span>      newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> current    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token comment" spellcheck="true">// 3. 在 表中 插入</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> current        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode      newNode<span class="token punctuation">.</span>next <span class="token operator">=</span> current    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4.长度加一</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 get 获取数据 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>data  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 indexOf 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>indexOf <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        index<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 update 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> newData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    current<span class="token punctuation">.</span>data <span class="token operator">=</span> newData    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 removeAt 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>removeAt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> prev <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        prev <span class="token operator">=</span> current        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> current<span class="token punctuation">.</span>data  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 remove 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 isEmpty 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 size 方法</span>  LinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-2-双向链表"><a href="#5-2-双向链表" class="headerlink" title="5.2 双向链表"></a>5.2 双向链表</h3><ul><li>既可以从头遍历到尾，也可以从尾遍历到头</li><li>实现原理：一个节点即有向前连接的引用，向后连接的引用</li><li>缺点：<ul><li>插入或删除需要处理 四个引用</li><li>相比于单向链表，占用内存空间更大</li></ul></li></ul><blockquote><p>瑕不掩瑜，这些缺点对于操作的方便性是微不足道的。</p></blockquote><ul><li>双向链表的实现：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">DoulyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义 内部类 封装数据</span>  <span class="token keyword">function</span> <span class="token function">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 内部属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token comment" spellcheck="true">// append 尾部追加方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>append <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> newElem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 判断 双向链表 是否为空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newElem      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newElem      newElem<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 长度加一</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// forwardString 正向遍历</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forwardString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">' '</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// backwardString 倒向遍历</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>backwardString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail    <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      str <span class="token operator">+</span><span class="token operator">=</span> current<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token string">' '</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>prev    <span class="token punctuation">}</span>    <span class="token keyword">return</span> str  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// toString 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">forwardString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// insert 插入方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建数据类</span>    <span class="token keyword">var</span> newElem <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataElement</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 1. 越界判断</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 2. 插入的实现</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.1 链表内没有数据直接插入</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newElem      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.2 插入第一个位置</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> newElem        newElem<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> newElem      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.3 插入最后一个位置</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newElem        newElem<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> newElem      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 2.4 插入中间的位置</span>        <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newElem        newElem<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        newElem<span class="token punctuation">.</span>next <span class="token operator">=</span> current        current<span class="token punctuation">.</span>prev <span class="token operator">=</span> newElem      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 长度加一</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// get 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token comment" spellcheck="true">// 1. 判断 position 在链表的位置</span>    <span class="token comment" spellcheck="true">// 1.1 在链表的前半部分，用正向查询</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">>=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>      <span class="token keyword">return</span> current<span class="token punctuation">.</span>data    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1.2 在链表的后半部分，用反向查询</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail      <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>prev      <span class="token punctuation">}</span>      <span class="token keyword">return</span> current<span class="token punctuation">.</span>data    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// indexOf 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>indexOf <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">.</span>data <span class="token operator">===</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> index      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        index<span class="token operator">++</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// update 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 判断 position 的位置 在链表中的位置 来决定正向 反向查询</span>    <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head    <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>      current <span class="token operator">=</span> current<span class="token punctuation">.</span>next    <span class="token punctuation">}</span>    current<span class="token punctuation">.</span>data <span class="token operator">=</span> data    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// removeAt 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>removeAt <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> position <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token comment" spellcheck="true">// 1.1 移除 头部第一个数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 1.2 当链表只有一个数据</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1.3 当链表有多个数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>head <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>next        <span class="token keyword">this</span><span class="token punctuation">.</span>head<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 2.1 移除 尾部的第一个数据</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>tail <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>prev      <span class="token keyword">this</span><span class="token punctuation">.</span>tail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 3. 移除 中间的数据</span>      <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>      <span class="token comment" spellcheck="true">// 3.1 判断 删除的元素位置 在链表 的对应位置</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">>=</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>head        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>next        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> current <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tail        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>          current <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        <span class="token punctuation">}</span>        current<span class="token punctuation">.</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> current<span class="token punctuation">.</span>prev        current<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> current<span class="token punctuation">.</span>next      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// remove 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> position <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeAt</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// isEmpty 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// size 方法 的实现</span>  DoulyLinkedList<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>size <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="6-集合"><a href="#6-集合" class="headerlink" title="6. 集合"></a>6. 集合</h2><ul><li>特点：无序，不能重复的元素构成</li><li>ES6 封装的 <code>Set</code> 类 即是 集合类</li><li>集合类的实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">mySet</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 创建 一个对象 来接收 数据</span>  items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 add 方法 向集合添加一个新的项</span>  <span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 判断是否存在这个值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">=</span> value      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 remove 方法 从集合移除一个值</span>  <span class="token function">remove</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">[</span>value<span class="token punctuation">]</span>      <span class="token keyword">return</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 has 方法 判断值是否在集合中 返回值为 布尔</span>  <span class="token function">has</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 clear 方法 移除集合中所有项</span>  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 size 方法</span>  <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">.</span>length  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 实现 values 方法 返回一个包含集合所有值的数组</span>  <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>集合间操作</p><ul><li>并集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 求并集 的函数实现</span>  <span class="token function">union</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> unionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      unionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> unionSet  <span class="token punctuation">}</span></code></pre></li></ul><ul><li>差集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 求交集 的函数实现</span>  <span class="token function">intersection</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> intersectionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        intersectionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> intersection  <span class="token punctuation">}</span></code></pre><ul><li>交集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 求差集 的函数实现</span>  <span class="token function">Subtraction</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> SubtractionSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SubtractionSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> SubtractionSet  <span class="token punctuation">}</span></code></pre><ul><li>子集</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 判断是否是 子集 的函数实现</span>  <span class="token function">subset</span><span class="token punctuation">(</span>otherSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> otherSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><h2 id="7-字典"><a href="#7-字典" class="headerlink" title="7. 字典"></a>7. 字典</h2><ul><li>特点：<ul><li>存储的是键值对</li><li>一个键对应一个值</li><li>键是不允许重复的</li></ul></li><li>在 JavaScript 中 字典和对象之间基本可以相互替代</li><li>在很多编程语言（如 java）中，对象通常实在编译期就确定下来的结构，不可以动态的添加或删除，字典通常会使用类似 <code>哈希表</code> 的数据结构去实现一种动态的添加数据的结构</li></ul><h2 id="8-哈希表"><a href="#8-哈希表" class="headerlink" title="8. 哈希表"></a>8. 哈希表</h2><ul><li>哈希表是一种根据 键值对而直接访问的数据结构</li><li>给定表 M，存在函数 f(key)，对任意给定的关键字值 key，代入函数后或能得到包含该关键字的记录在表中的地址，则称表 M 为哈希表，函数为哈希函数</li><li>哈希表的优点：<ul><li>提供非常快速的 插入-删除-查找 操作</li><li>无论多少数据，插入语和删除值需要非常接近常量的时间，即 O(1) 的时间级</li><li>查找速度比数还要快，基本可以瞬间找到想要的元素。</li></ul></li><li>哈希表的缺点：<ul><li>哈希表中的数据是没有顺序的，所以不能以一种固定的方式（比如从小到大）来遍历其中的额元素。</li><li>一般而言，哈希表中的 key 是不允许重复的，不能放置相同的 key 保存不同的元素。</li></ul></li></ul><h3 id="8-1-冲突"><a href="#8-1-冲突" class="headerlink" title="8.1 冲突"></a>8.1 冲突</h3><ul><li>通过哈希函数得到一个数所在位置已经被其他数存储了，这种现象称为 冲突。</li><li>解决方案：<ul><li><code>链地址法</code></li><li><code>开放地址法</code></li></ul></li></ul><h3 id="8-2-链地址法"><a href="#8-2-链地址法" class="headerlink" title="8.2 链地址法"></a>8.2 链地址法</h3><ul><li>每个数组单元中存储的不再是单个数据，而是一个链条（数组或链表）</li><li>一旦发现重复，将重复的元素插入到链表的首端或者末端即可</li><li>当查询时，先根据哈希化后的下标值找到对应的位置，再取出链表，依次查询要寻找的数据</li><li>链条的选择根据业务需要来决定。当需要插入到首位时（新插入的数据用于取出的可能性比较大），有限选择 链表。</li></ul><h3 id="8-3-开放地址法"><a href="#8-3-开放地址法" class="headerlink" title="8.3 开放地址法"></a>8.3 开放地址法</h3><ul><li><p>寻找空白的单元格来添加重复的数据。</p></li><li><p>探索空白位置的三种方式：</p><ul><li><p>线性探测</p><p>​ 往后 +1 插入 \ 查找 \ 删除，查找的空位置就停止，删除则将该位置的内容置 -1</p></li><li><p>二次探测</p><p>​ 对步长做了优化, 比如从下标值 x 开始, x+1², x+2², x+3²，可以一次性探测比较长的距离</p></li><li><p>再哈希法</p><p>​ 把关键字再用另外一个哈希函数，再做一次哈希化，用这次的结果作为步长</p></li></ul></li></ul><blockquote><p>一般而言，链地址法相对于开放地址法来说效率好，使用链地址法的情况也比较多</p></blockquote><h3 id="8-4-哈希表的实现"><a href="#8-4-哈希表的实现" class="headerlink" title="8.4 哈希表的实现"></a>8.4 哈希表的实现</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">HashTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 存放的 数据 个数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> <span class="token number">7</span>  <span class="token comment" spellcheck="true">// 方法</span>  <span class="token comment" spellcheck="true">// 设计 哈希函数</span>  <span class="token comment" spellcheck="true">// 1. 将 字符串 转换成 比较大的数字：hashCode</span>  <span class="token comment" spellcheck="true">// 2. 将 大的数字 hashCode 压缩到 数组范围（大小）内</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hashFunc <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 定义 hashCode 变量</span>    <span class="token keyword">var</span> hashCode <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true">// 2. 霍纳算法 计算 hashCode 的值</span>    <span class="token comment" spellcheck="true">// 2.1 cats => Unicode 编码</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      hashCode <span class="token operator">=</span> <span class="token number">37</span> <span class="token operator">*</span> hashCode <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3. 取余操作</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> hashCode <span class="token operator">%</span> size    <span class="token keyword">return</span> index  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 插入 &amp; 修改 操作 的实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>put <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 通过 哈希化 index 获取 对应的 index</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 根据 index 创建 对应的 bucket</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 3. 若 bucket 为 undefined 则 需要创建</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> bucket    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 判断 是否是 修改操作</span>    <span class="token keyword">var</span> override <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value        override <span class="token operator">=</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 进行 插入操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>override<span class="token punctuation">)</span> <span class="token punctuation">{</span>      bucket<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>      <span class="token comment" spellcheck="true">// 数组扩容</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">></span> <span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> newPrime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>newPrime<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 获取 操作 的实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token keyword">get</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 根据 key 获取 对应的 index</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 根据 index 获取 对应的 bucket</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 3. 判断 bucket 是否为 undefined</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 4. 有 bucket 那么就进行 线性查询</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 依然没有找到，那么返回 null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 删除 操作 的实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>remove <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 通过 key 获取 对应的 index</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hashFunc</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 2. 通过 index 获取 对应的 bucket</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 3. 如果 bucket 不存在 返回 null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 4. 线性查找 bucket 中的元素，删除对应的值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        bucket<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">></span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">&lt;</span> <span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> newPrime <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPrime</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>newPrime<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 5. 如果依然没找到 返回 null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 判断 是否为空 的函数 实现</span>  HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isEmpty <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">===</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="8-5-哈希表扩容的思想"><a href="#8-5-哈希表扩容的思想" class="headerlink" title="8.5 哈希表扩容的思想"></a>8.5 哈希表扩容的思想</h3><ul><li>为什么需要扩容<ul><li>链地址法，loadFactor 可以大于 1， 所以这个哈希表可以无限制的插入新数据</li><li>随着数据量的增多，每一个 index 对应的 bucket 会越来越长，也就导致效率降低。</li></ul></li><li>如何进行扩容<ul><li>一般可以增大两倍然后向上取最近的质数</li><li>所有数据都要同时进行修改</li><li>虽然耗时但是是必须的</li></ul></li><li>在什么情况下扩容<ul><li>当 loadFactor &gt; 0.75 时进行扩容</li></ul></li></ul><blockquote><p>loadFactor 表示哈希表中元素的填满程度</p></blockquote><ul><li>实现：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 哈希表 扩容</span>HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>resize <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newLimit<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 1. 保存 旧的数组内容</span>  <span class="token keyword">var</span> oldStorage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>storage  <span class="token comment" spellcheck="true">// 2. 重置属性</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> newLimit  <span class="token comment" spellcheck="true">// 3. 遍历 旧数组中的所有数据项，并且 重新插入到 哈希表中</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> bucket <span class="token operator">=</span> oldStorage<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 3.1 bucket 为 null，说明这里没有数据</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bucket <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">continue</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3.2 bucket 中有数据，那么将里边的数据 重新 哈希化赋值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> bucket<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tuple <span class="token operator">=</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断 质数 的函数</span>HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isPrime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> temp<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 向上取 最近的质数</span>HashTable<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getPrime <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrime</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    num<span class="token operator">++</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> num<span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/07/17/hello-world/"/>
      <url>/2020/07/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
